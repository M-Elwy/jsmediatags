{"version":3,"file":"jsmediatags.cjs.development.js","sources":["../src/ChunkedFileData.ts","../src/StringUtils.ts","../src/MediaFileReader.ts","../src/XhrFileReader.ts","../src/BlobFileReader.ts","../src/ArrayFileReader.ts","../src/MediaTagReader.ts","../src/ID3v1TagReader.ts","../src/ID3v2FrameReader.ts","../src/ID3v2TagReader.ts","../src/MP4TagReader.ts","../src/FLACTagReader.ts","../src/NodeFileReader.ts","../src/jsmediatags.ts"],"sourcesContent":["/**\r\n * This class represents a file that might not have all its data loaded yet.\r\n * It is used when loading the entire file is not an option because it's too\r\n * expensive. Instead, parts of the file are loaded and added only when needed.\r\n * From a reading point of view is as if the entire file is loaded. The\r\n * exception is when the data is not available yet, an error will be thrown.\r\n * This class does not load the data, it just manages it. It provides operations\r\n * to add and read data from the file.\r\n *\r\n * @flow\r\n */\r\nconst NOT_FOUND = -1;\r\n\r\nimport type { ChunkType, DataType } from \"./FlowTypes\";\r\n\r\nclass ChunkedFileData {\r\n  // $FlowIssue - get/set properties not yet supported\r\n  static get NOT_FOUND() {\r\n    return NOT_FOUND;\r\n  }\r\n  _fileData: Array<ChunkType>;\r\n\r\n  constructor() {\r\n    this._fileData = [];\r\n  }\r\n\r\n  /**\r\n   * Adds data to the file storage at a specific offset.\r\n   */\r\n  addData(offset: number, data: DataType): void {\r\n    var offsetEnd = offset + data.length - 1;\r\n    var chunkRange = this._getChunkRange(offset, offsetEnd);\r\n\r\n    if (chunkRange.startIx === NOT_FOUND) {\r\n      this._fileData.splice(chunkRange.insertIx || 0, 0, {\r\n        offset: offset,\r\n        data: data,\r\n      });\r\n    } else {\r\n      // If the data to add collides with existing chunks we prepend and\r\n      // append data from the half colliding chunks to make the collision at\r\n      // 100%. The new data can then replace all the colliding chunkes.\r\n      var firstChunk = this._fileData[chunkRange.startIx];\r\n      var lastChunk = this._fileData[chunkRange.endIx];\r\n      var needsPrepend = offset > firstChunk.offset;\r\n      var needsAppend =\r\n        offsetEnd < lastChunk.offset + lastChunk.data.length - 1;\r\n\r\n      var chunk = {\r\n        offset: Math.min(offset, firstChunk.offset),\r\n        data: data,\r\n      };\r\n\r\n      if (needsPrepend) {\r\n        var slicedData = this._sliceData(\r\n          firstChunk.data,\r\n          0,\r\n          offset - firstChunk.offset\r\n        );\r\n        chunk.data = this._concatData(slicedData, data);\r\n      }\r\n\r\n      if (needsAppend) {\r\n        // Use the lastChunk because the slice logic is easier to handle.\r\n        var slicedData = this._sliceData(\r\n          chunk.data,\r\n          0,\r\n          lastChunk.offset - chunk.offset\r\n        );\r\n        chunk.data = this._concatData(slicedData, lastChunk.data);\r\n      }\r\n\r\n      this._fileData.splice(\r\n        chunkRange.startIx,\r\n        chunkRange.endIx - chunkRange.startIx + 1,\r\n        chunk\r\n      );\r\n    }\r\n  }\r\n\r\n  _concatData(dataA: DataType, dataB: DataType): DataType {\r\n    // TypedArrays don't support concat.\r\n    if (\r\n      typeof ArrayBuffer !== \"undefined\" &&\r\n      ArrayBuffer.isView &&\r\n      ArrayBuffer.isView(dataA)\r\n    ) {\r\n      // $FlowIssue - flow thinks dataAandB is a string but it's not\r\n      var dataAandB = new dataA.constructor(dataA.length + dataB.length);\r\n      // $FlowIssue - flow thinks dataAandB is a string but it's not\r\n      dataAandB.set(dataA, 0);\r\n      // $FlowIssue - flow thinks dataAandB is a string but it's not\r\n      dataAandB.set(dataB, dataA.length);\r\n      return dataAandB;\r\n    } else {\r\n      // $FlowIssue - flow thinks dataAandB is a TypedArray but it's not\r\n      return dataA.concat(dataB);\r\n    }\r\n  }\r\n\r\n  _sliceData(data: DataType, begin: number, end: number): DataType {\r\n    // Some TypeArray implementations do not support slice yet.\r\n    if (data.slice) {\r\n      return data.slice(begin, end);\r\n    } else {\r\n      // $FlowIssue - flow thinks data is a string but it's not\r\n      return data.subarray(begin, end);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finds the chunk range that overlaps the [offsetStart-1,offsetEnd+1] range.\r\n   * When a chunk is adjacent to the offset we still consider it part of the\r\n   * range (this is the situation of offsetStart-1 or offsetEnd+1).\r\n   * When no chunks are found `insertIx` denotes the index where the data\r\n   * should be inserted in the data list (startIx == NOT_FOUND and endIX ==\r\n   * NOT_FOUND).\r\n   */\r\n  _getChunkRange(\r\n    offsetStart: number,\r\n    offsetEnd: number\r\n  ): { startIx: number; endIx: number; insertIx?: number } {\r\n    var startChunkIx = NOT_FOUND;\r\n    var endChunkIx = NOT_FOUND;\r\n    var insertIx = 0;\r\n\r\n    // Could use binary search but not expecting that many blocks to exist.\r\n    for (var i = 0; i < this._fileData.length; i++, insertIx = i) {\r\n      var chunkOffsetStart = this._fileData[i].offset;\r\n      var chunkOffsetEnd = chunkOffsetStart + this._fileData[i].data.length;\r\n\r\n      if (offsetEnd < chunkOffsetStart - 1) {\r\n        // This offset range doesn't overlap with any chunks.\r\n        break;\r\n      }\r\n      // If it is adjacent we still consider it part of the range because\r\n      // we're going end up with a single block with all contiguous data.\r\n      if (\r\n        offsetStart <= chunkOffsetEnd + 1 &&\r\n        offsetEnd >= chunkOffsetStart - 1\r\n      ) {\r\n        startChunkIx = i;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // No starting chunk was found, meaning that the offset is either before\r\n    // or after the current stored chunks.\r\n    if (startChunkIx === NOT_FOUND) {\r\n      return {\r\n        startIx: NOT_FOUND,\r\n        endIx: NOT_FOUND,\r\n        insertIx: insertIx,\r\n      };\r\n    }\r\n\r\n    // Find the ending chunk.\r\n    for (var i = startChunkIx; i < this._fileData.length; i++) {\r\n      var chunkOffsetStart = this._fileData[i].offset;\r\n      var chunkOffsetEnd = chunkOffsetStart + this._fileData[i].data.length;\r\n\r\n      if (offsetEnd >= chunkOffsetStart - 1) {\r\n        // Candidate for the end chunk, it doesn't mean it is yet.\r\n        endChunkIx = i;\r\n      }\r\n      if (offsetEnd <= chunkOffsetEnd + 1) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (endChunkIx === NOT_FOUND) {\r\n      endChunkIx = startChunkIx;\r\n    }\r\n\r\n    return {\r\n      startIx: startChunkIx,\r\n      endIx: endChunkIx,\r\n    };\r\n  }\r\n\r\n  hasDataRange(offsetStart: number, offsetEnd: number): boolean {\r\n    for (var i = 0; i < this._fileData.length; i++) {\r\n      var chunk = this._fileData[i];\r\n      if (offsetEnd < chunk.offset) {\r\n        return false;\r\n      }\r\n\r\n      if (\r\n        offsetStart >= chunk.offset &&\r\n        offsetEnd < chunk.offset + chunk.data.length\r\n      ) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  getByteAt(offset: number): any {\r\n    var dataChunk;\r\n\r\n    for (var i = 0; i < this._fileData.length; i++) {\r\n      var dataChunkStart = this._fileData[i].offset;\r\n      var dataChunkEnd = dataChunkStart + this._fileData[i].data.length - 1;\r\n\r\n      if (offset >= dataChunkStart && offset <= dataChunkEnd) {\r\n        dataChunk = this._fileData[i];\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (dataChunk) {\r\n      return dataChunk.data[offset - dataChunk.offset];\r\n    }\r\n\r\n    throw new Error(\"Offset \" + offset + \" hasn't been loaded yet.\");\r\n  }\r\n}\r\n\r\nexport default ChunkedFileData;\r\n","\r\n\r\n\r\nexport type DecodedString = InternalDecodedString;\r\n\r\nclass InternalDecodedString {\r\n  _value: string;\r\n  bytesReadCount: number;\r\n  length: number;\r\n\r\n  constructor(value: string, bytesReadCount: number) {\r\n    this._value = value;\r\n    this.bytesReadCount = bytesReadCount;\r\n    this.length = value.length;\r\n  }\r\n\r\n  toString(): string {\r\n    return this._value;\r\n  }\r\n}\r\n\r\nvar StringUtils = {\r\n  readUTF16String: function(\r\n    bytes: Array<number>,\r\n    bigEndian: boolean,\r\n    maxBytes?: number\r\n  ): DecodedString {\r\n    var ix = 0;\r\n    var offset1 = 1, offset2 = 0;\r\n\r\n    maxBytes = Math.min(maxBytes||bytes.length, bytes.length);\r\n\r\n    if( bytes[0] == 0xFE && bytes[1] == 0xFF ) {\r\n      bigEndian = true;\r\n      ix = 2;\r\n    } else if( bytes[0] == 0xFF && bytes[1] == 0xFE ) {\r\n      bigEndian = false;\r\n      ix = 2;\r\n    }\r\n    if( bigEndian ) {\r\n      offset1 = 0;\r\n      offset2 = 1;\r\n    }\r\n\r\n    var arr = [];\r\n    for( var j = 0; ix < maxBytes; j++ ) {\r\n        var byte1 = bytes[ix+offset1];\r\n        var byte2 = bytes[ix+offset2];\r\n        var word1 = (byte1<<8)+byte2;\r\n        ix += 2;\r\n        if( word1 == 0x0000 ) {\r\n            break;\r\n        } else if( byte1 < 0xD8 || byte1 >= 0xE0 ) {\r\n            arr[j] = String.fromCharCode(word1);\r\n        } else {\r\n            var byte3 = bytes[ix+offset1];\r\n            var byte4 = bytes[ix+offset2];\r\n            var word2 = (byte3<<8)+byte4;\r\n            ix += 2;\r\n            arr[j] = String.fromCharCode(word1, word2);\r\n        }\r\n    }\r\n    return new InternalDecodedString(arr.join(\"\"), ix);\r\n  },\r\n\r\n  readUTF8String: function(\r\n    bytes: Array<number>,\r\n    maxBytes?: number\r\n  ): DecodedString {\r\n    var ix = 0;\r\n    maxBytes = Math.min(maxBytes||bytes.length, bytes.length);\r\n\r\n    if( bytes[0] == 0xEF && bytes[1] == 0xBB && bytes[2] == 0xBF ) {\r\n      ix = 3;\r\n    }\r\n\r\n    var arr = [];\r\n    for( var j = 0; ix < maxBytes; j++ ) {\r\n      var byte1 = bytes[ix++];\r\n      if( byte1 == 0x00 ) {\r\n        break;\r\n      } else if( byte1 < 0x80 ) {\r\n        arr[j] = String.fromCharCode(byte1);\r\n      } else if( byte1 >= 0xC2 && byte1 < 0xE0 ) {\r\n        var byte2 = bytes[ix++];\r\n        arr[j] = String.fromCharCode(((byte1&0x1F)<<6) + (byte2&0x3F));\r\n      } else if( byte1 >= 0xE0 && byte1 < 0xF0 ) {\r\n        var byte2 = bytes[ix++];\r\n        var byte3 = bytes[ix++];\r\n        arr[j] = String.fromCharCode(((byte1&0xFF)<<12) + ((byte2&0x3F)<<6) + (byte3&0x3F));\r\n      } else if( byte1 >= 0xF0 && byte1 < 0xF5) {\r\n        var byte2 = bytes[ix++];\r\n        var byte3 = bytes[ix++];\r\n        var byte4 = bytes[ix++];\r\n        var codepoint = ((byte1&0x07)<<18) + ((byte2&0x3F)<<12)+ ((byte3&0x3F)<<6) + (byte4&0x3F) - 0x10000;\r\n        arr[j] = String.fromCharCode(\r\n          (codepoint>>10) + 0xD800,\r\n          (codepoint&0x3FF) + 0xDC00\r\n        );\r\n      }\r\n    }\r\n    return new InternalDecodedString(arr.join(\"\"), ix);\r\n  },\r\n\r\n  readNullTerminatedString: function(\r\n    bytes: Array<number>,\r\n    maxBytes?: number\r\n  ): DecodedString {\r\n    var arr = [];\r\n    maxBytes = maxBytes || bytes.length;\r\n    for ( var i = 0; i < maxBytes; ) {\r\n      var byte1 = bytes[i++];\r\n      if ( byte1 == 0x00 ) {\r\n        break;\r\n      }\r\n      arr[i-1] = String.fromCharCode(byte1);\r\n    }\r\n    return new InternalDecodedString(arr.join(\"\"), i);\r\n  }\r\n};\r\n\r\nexport default StringUtils;\r\n","import StringUtils from './StringUtils';\r\n\r\nimport type {\r\n  DecodedString\r\n} from './StringUtils';\r\n\r\nimport type {\r\n  LoadCallbackType,\r\n  CharsetType\r\n} from './FlowTypes';\r\n\r\nclass MediaFileReader {\r\n  _isInitialized: boolean;\r\n  _size: number;\r\n\r\n  constructor() {\r\n    this._isInitialized = false;\r\n    this._size = 0;\r\n  }\r\n\r\n  /**\r\n   * Decides if this media file reader is able to read the given file.\r\n   */\r\n  static canReadFile(file: any): boolean {\r\n    throw new Error(\"Must implement canReadFile function\");\r\n  }\r\n\r\n  /**\r\n   * This function needs to be called before any other function.\r\n   * Loads the necessary initial information from the file.\r\n   */\r\n  init(callbacks: LoadCallbackType): void {\r\n    var self = this;\r\n\r\n    if (this._isInitialized) {\r\n      setTimeout(callbacks.onSuccess, 1);\r\n    } else {\r\n      return this._init({\r\n        onSuccess: function() {\r\n          self._isInitialized = true;\r\n          callbacks.onSuccess();\r\n        },\r\n        onError: callbacks.onError\r\n      });\r\n    }\r\n  }\r\n\r\n  _init(callbacks: LoadCallbackType): void {\r\n    throw new Error(\"Must implement init function\");\r\n  }\r\n\r\n  /**\r\n   * @param range The start and end indexes of the range to load.\r\n   *        Ex: [0, 7] load bytes 0 to 7 inclusive.\r\n   */\r\n  loadRange(range: [number, number], callbacks: LoadCallbackType): void {\r\n    throw new Error(\"Must implement loadRange function\");\r\n  }\r\n\r\n  /**\r\n   * @return The size of the file in bytes.\r\n   */\r\n  getSize(): number {\r\n    if (!this._isInitialized) {\r\n      throw new Error(\"init() must be called first.\");\r\n    }\r\n\r\n    return this._size;\r\n  }\r\n\r\n  getByteAt(offset: number): number {\r\n    throw new Error(\"Must implement getByteAt function\");\r\n  }\r\n\r\n  getBytesAt(offset: number, length: number): Array<number> {\r\n    var bytes = new Array(length);\r\n    for( var i = 0; i < length; i++ ) {\r\n      bytes[i] = this.getByteAt(offset+i);\r\n    }\r\n    return bytes;\r\n  }\r\n\r\n  isBitSetAt(offset: number, bit: number): boolean {\r\n    var iByte = this.getByteAt(offset);\r\n    return (iByte & (1 << bit)) != 0;\r\n  }\r\n\r\n  getSByteAt(offset: number): number {\r\n    var iByte = this.getByteAt(offset);\r\n    if (iByte > 127) {\r\n      return iByte - 256;\r\n    } else {\r\n      return iByte;\r\n    }\r\n  }\r\n\r\n  getShortAt(offset: number, isBigEndian: boolean): number {\r\n    var iShort = isBigEndian\r\n      ? (this.getByteAt(offset) << 8) + this.getByteAt(offset + 1)\r\n      : (this.getByteAt(offset + 1) << 8) + this.getByteAt(offset);\r\n    if (iShort < 0) {\r\n      iShort += 65536;\r\n    }\r\n    return iShort;\r\n  }\r\n\r\n  getSShortAt(offset: number, isBigEndian: boolean): number {\r\n    var iUShort = this.getShortAt(offset, isBigEndian);\r\n    if (iUShort > 32767) {\r\n      return iUShort - 65536;\r\n    } else {\r\n      return iUShort;\r\n    }\r\n  }\r\n\r\n  getLongAt(offset: number, isBigEndian: boolean): number {\r\n    var iByte1 = this.getByteAt(offset),\r\n      iByte2 = this.getByteAt(offset + 1),\r\n      iByte3 = this.getByteAt(offset + 2),\r\n      iByte4 = this.getByteAt(offset + 3);\r\n\r\n    var iLong = isBigEndian\r\n      ? (((((iByte1 << 8) + iByte2) << 8) + iByte3) << 8) + iByte4\r\n      : (((((iByte4 << 8) + iByte3) << 8) + iByte2) << 8) + iByte1;\r\n\r\n    if (iLong < 0) {\r\n      iLong += 4294967296;\r\n    }\r\n\r\n    return iLong;\r\n  }\r\n\r\n  getSLongAt(offset: number, isBigEndian: boolean): number {\r\n    var iULong = this.getLongAt(offset, isBigEndian);\r\n\r\n    if (iULong > 2147483647) {\r\n      return iULong - 4294967296;\r\n    } else {\r\n      return iULong;\r\n    }\r\n  }\r\n\r\n  getInteger24At(offset: number, isBigEndian: boolean): number {\r\n    var iByte1 = this.getByteAt(offset),\r\n      iByte2 = this.getByteAt(offset + 1),\r\n      iByte3 = this.getByteAt(offset + 2);\r\n\r\n    var iInteger = isBigEndian\r\n      ? ((((iByte1 << 8) + iByte2) << 8) + iByte3)\r\n      : ((((iByte3 << 8) + iByte2) << 8) + iByte1);\r\n\r\n    if (iInteger < 0) {\r\n      iInteger += 16777216;\r\n    }\r\n\r\n    return iInteger;\r\n  }\r\n\r\n  getStringAt(offset: number, length: number): string {\r\n    var string = [];\r\n    for (var i = offset, j = 0; i < offset+length; i++, j++) {\r\n      string[j] = String.fromCharCode(this.getByteAt(i));\r\n    }\r\n    return string.join(\"\");\r\n  }\r\n\r\n  getStringWithCharsetAt(\r\n    offset: number,\r\n    length: number,\r\n    charset?: CharsetType\r\n  ): DecodedString {\r\n    var bytes = this.getBytesAt(offset, length);\r\n    var string;\r\n\r\n    switch ((charset||'').toLowerCase()) {\r\n      case \"utf-16\":\r\n      case \"utf-16le\":\r\n      case \"utf-16be\":\r\n        string = StringUtils.readUTF16String(bytes, charset === \"utf-16be\");\r\n        break;\r\n\r\n      case \"utf-8\":\r\n        string = StringUtils.readUTF8String(bytes);\r\n        break;\r\n\r\n      default:\r\n        string = StringUtils.readNullTerminatedString(bytes);\r\n        break;\r\n    }\r\n\r\n    return string;\r\n  }\r\n\r\n  getCharAt(offset: number): string {\r\n    return String.fromCharCode(this.getByteAt(offset));\r\n  }\r\n\r\n  /**\r\n   * The ID3v2 tag/frame size is encoded with four bytes where the most\r\n   * significant bit (bit 7) is set to zero in every byte, making a total of 28\r\n   * bits. The zeroed bits are ignored, so a 257 bytes long tag is represented\r\n   * as $00 00 02 01.\r\n   */\r\n  getSynchsafeInteger32At(offset: number): number {\r\n    var size1 = this.getByteAt(offset);\r\n    var size2 = this.getByteAt(offset+1);\r\n    var size3 = this.getByteAt(offset+2);\r\n    var size4 = this.getByteAt(offset+3);\r\n    // 0x7f = 0b01111111\r\n    var size =size4 & 0x7f\r\n      | ((size3 & 0x7f) << 7)\r\n      | ((size2 & 0x7f) << 14)\r\n      | ((size1 & 0x7f) << 21);\r\n\r\n    return size;\r\n  }\r\n}\r\n\r\nexport default MediaFileReader;\r\n","import ChunkedFileData from './ChunkedFileData';\r\nimport MediaFileReader from './MediaFileReader';\r\n\r\nconst CHUNK_SIZE = 1024;\r\n\r\nimport type {\r\n  LoadCallbackType,\r\n  CallbackType\r\n} from './FlowTypes';\r\n\r\ntype ContentRangeType = {\r\n  firstBytePosition?: number,\r\n  lastBytePosition?: number,\r\n  instanceLength?:number,\r\n};\r\n\r\nclass XhrFileReader extends MediaFileReader {\r\n  static _config: {\r\n    avoidHeadRequests: boolean,\r\n    disallowedXhrHeaders: Array<string>,\r\n    timeoutInSec: number\r\n  };\r\n  _url: string;\r\n  _fileData: ChunkedFileData;\r\n\r\n  constructor(url: string) {\r\n    super();\r\n    this._url = url;\r\n    this._fileData = new ChunkedFileData();\r\n  }\r\n\r\n  static canReadFile(file: any): boolean {\r\n    return (\r\n      typeof file === 'string' &&\r\n      /^[a-z]+:\\/\\//i.test(file)\r\n    );\r\n  }\r\n\r\n  static setConfig(config: Object) {\r\n    for (var key in config) if (config.hasOwnProperty(key)) {\r\n      this._config[key] = config[key];\r\n    }\r\n\r\n    var disallowedXhrHeaders = this._config.disallowedXhrHeaders;\r\n    for (var i = 0; i < disallowedXhrHeaders.length; i++) {\r\n      disallowedXhrHeaders[i] = disallowedXhrHeaders[i].toLowerCase();\r\n    }\r\n  }\r\n\r\n  _init(callbacks: LoadCallbackType): void {\r\n    if (XhrFileReader._config.avoidHeadRequests) {\r\n      this._fetchSizeWithGetRequest(callbacks);\r\n    } else {\r\n      this._fetchSizeWithHeadRequest(callbacks);\r\n    }\r\n  }\r\n\r\n  _fetchSizeWithHeadRequest(callbacks: LoadCallbackType): void {\r\n    var self = this;\r\n\r\n    this._makeXHRRequest(\"HEAD\", null, {\r\n      onSuccess: function(xhr: XMLHttpRequest) {\r\n        var contentLength = self._parseContentLength(xhr);\r\n        if (contentLength) {\r\n          self._size = contentLength;\r\n          callbacks.onSuccess();\r\n        } else {\r\n          // Content-Length not provided by the server, fallback to\r\n          // GET requests.\r\n          self._fetchSizeWithGetRequest(callbacks);\r\n        }\r\n      },\r\n      onError: callbacks.onError\r\n    });\r\n  }\r\n\r\n  _fetchSizeWithGetRequest(callbacks: LoadCallbackType): void {\r\n    var self = this;\r\n    var range = this._roundRangeToChunkMultiple([0, 0]);\r\n\r\n    this._makeXHRRequest(\"GET\", range, {\r\n      onSuccess: function(xhr: XMLHttpRequest) {\r\n        var contentRange = self._parseContentRange(xhr);\r\n        var data = self._getXhrResponseContent(xhr);\r\n\r\n        if (contentRange) {\r\n          if (contentRange.instanceLength == null) {\r\n            // Last resort, server is not able to tell us the content length,\r\n            // need to fetch entire file then.\r\n            self._fetchEntireFile(callbacks);\r\n            return;\r\n          }\r\n          self._size = contentRange.instanceLength;\r\n        } else {\r\n          // Range request not supported, we got the entire file\r\n          self._size = data.length;\r\n        }\r\n\r\n        self._fileData.addData(0, data);\r\n        callbacks.onSuccess();\r\n      },\r\n      onError: callbacks.onError\r\n    });\r\n  }\r\n\r\n  _fetchEntireFile(callbacks: LoadCallbackType): void {\r\n    var self = this;\r\n    this._makeXHRRequest(\"GET\", null, {\r\n      onSuccess: function(xhr: XMLHttpRequest) {\r\n        var data = self._getXhrResponseContent(xhr);\r\n        self._size = data.length;\r\n        self._fileData.addData(0, data);\r\n        callbacks.onSuccess();\r\n      },\r\n      onError: callbacks.onError\r\n    });\r\n  }\r\n\r\n  _getXhrResponseContent(xhr: XMLHttpRequest): string {\r\n    return xhr.response || xhr.responseText || \"\";\r\n  }\r\n\r\n  _parseContentLength(xhr: XMLHttpRequest): number | null {\r\n    var contentLength = this._getResponseHeader(xhr, \"Content-Length\");\r\n\r\n    if (contentLength == null) {\r\n      return contentLength;\r\n    } else {\r\n      return parseInt(contentLength, 10);\r\n    }\r\n  }\r\n\r\n  _parseContentRange(xhr: XMLHttpRequest): ContentRangeType | null {\r\n    var contentRange = this._getResponseHeader(xhr, \"Content-Range\");\r\n\r\n    if (contentRange) {\r\n      var parsedContentRange = contentRange.match(\r\n        /bytes (\\d+)-(\\d+)\\/(?:(\\d+)|\\*)/i\r\n      );\r\n      if (!parsedContentRange) {\r\n        throw new Error(\"FIXME: Unknown Content-Range syntax: \" + contentRange);\r\n      }\r\n\r\n      return {\r\n        firstBytePosition: parseInt(parsedContentRange[1], 10),\r\n        lastBytePosition: parseInt(parsedContentRange[2], 10),\r\n        instanceLength: parsedContentRange[3] ? parseInt(parsedContentRange[3], 10) : null\r\n      };\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  loadRange(range: [number, number], callbacks: LoadCallbackType): void {\r\n    var self = this;\r\n\r\n    if (self._fileData.hasDataRange(range[0], Math.min(self._size, range[1]))) {\r\n      setTimeout(callbacks.onSuccess, 1);\r\n      return;\r\n    }\r\n\r\n    // Always download in multiples of CHUNK_SIZE. If we're going to make a\r\n    // request might as well get a chunk that makes sense. The big cost is\r\n    // establishing the connection so getting 10bytes or 1K doesn't really\r\n    // make a difference.\r\n    range = this._roundRangeToChunkMultiple(range);\r\n\r\n    // Upper range should not be greater than max file size\r\n    range[1] = Math.min(self._size, range[1]);\r\n\r\n    this._makeXHRRequest(\"GET\", range, {\r\n      onSuccess: function(xhr: XMLHttpRequest) {\r\n        var data = self._getXhrResponseContent(xhr);\r\n        self._fileData.addData(range[0], data);\r\n        callbacks.onSuccess();\r\n      },\r\n      onError: callbacks.onError\r\n    });\r\n  }\r\n\r\n  _roundRangeToChunkMultiple(range: [number, number]): [number, number] {\r\n    var length = range[1] - range[0] + 1;\r\n    var newLength = Math.ceil(length/CHUNK_SIZE) * CHUNK_SIZE;\r\n    return [range[0], range[0] + newLength - 1];\r\n  }\r\n\r\n  _makeXHRRequest(\r\n    method: string,\r\n    range: [number, number],\r\n    callbacks: CallbackType\r\n  ) {\r\n    var xhr = this._createXHRObject();\r\n    xhr.open(method, this._url);\r\n\r\n    var onXHRLoad = function() {\r\n      // 200 - OK\r\n      // 206 - Partial Content\r\n      // $FlowIssue - xhr will not be null here\r\n      if (xhr.status === 200 || xhr.status === 206) {\r\n        callbacks.onSuccess(xhr);\r\n      } else if (callbacks.onError) {\r\n        callbacks.onError({\r\n          \"type\": \"xhr\",\r\n          \"info\": \"Unexpected HTTP status \" + xhr.status + \".\",\r\n          \"xhr\": xhr\r\n        });\r\n      }\r\n      xhr = null;\r\n    };\r\n\r\n    if (typeof xhr.onload !== 'undefined') {\r\n      xhr.onload = onXHRLoad;\r\n      xhr.onerror = function() {\r\n        if (callbacks.onError) {\r\n          callbacks.onError({\r\n            \"type\": \"xhr\",\r\n            \"info\": \"Generic XHR error, check xhr object.\",\r\n            \"xhr\": xhr,\r\n          });\r\n        }\r\n      }\r\n    } else {\r\n      xhr.onreadystatechange = function() {\r\n        // $FlowIssue - xhr will not be null here\r\n        if (xhr.readyState === 4) {\r\n          onXHRLoad();\r\n        }\r\n      };\r\n    }\r\n\r\n    if (XhrFileReader._config.timeoutInSec) {\r\n      xhr.timeout = XhrFileReader._config.timeoutInSec * 1000;\r\n      xhr.ontimeout = function() {\r\n        if (callbacks.onError) {\r\n          callbacks.onError({\r\n            \"type\": \"xhr\",\r\n            // $FlowIssue - xhr.timeout will not be null\r\n            \"info\": \"Timeout after \" + (xhr.timeout/1000) + \"s. Use jsmediatags.Config.setXhrTimeout to override.\",\r\n            \"xhr\": xhr,\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\r\n    if (range) {\r\n      this._setRequestHeader(xhr, \"Range\", \"bytes=\" + range[0] + \"-\" + range[1]);\r\n    }\r\n    this._setRequestHeader(xhr, \"If-Modified-Since\", \"Sat, 01 Jan 1970 00:00:00 GMT\");\r\n    xhr.send(null);\r\n  }\r\n\r\n  _setRequestHeader(xhr: XMLHttpRequest, headerName: string, headerValue: string) {\r\n    if (XhrFileReader._config.disallowedXhrHeaders.indexOf(headerName.toLowerCase()) < 0) {\r\n      xhr.setRequestHeader(headerName, headerValue);\r\n    }\r\n  }\r\n\r\n  _hasResponseHeader(xhr: XMLHttpRequest, headerName: string): boolean {\r\n    var allResponseHeaders = xhr.getAllResponseHeaders();\r\n\r\n    if (!allResponseHeaders) {\r\n      return false;\r\n    }\r\n\r\n    var headers = allResponseHeaders.split(\"\\r\\n\");\r\n    var headerNames = [];\r\n    for (var i = 0; i < headers.length; i++) {\r\n      headerNames[i] = headers[i].split(\":\")[0].toLowerCase();\r\n    }\r\n\r\n    return headerNames.indexOf(headerName.toLowerCase()) >= 0;\r\n  }\r\n\r\n  _getResponseHeader(xhr: XMLHttpRequest, headerName: string): string | null {\r\n    if (!this._hasResponseHeader(xhr, headerName)) {\r\n      return null;\r\n    }\r\n\r\n    return xhr.getResponseHeader(headerName);\r\n  }\r\n\r\n  getByteAt(offset: number): number {\r\n    var character = this._fileData.getByteAt(offset);\r\n    return character.charCodeAt(0) & 0xff;\r\n  }\r\n\r\n  _createXHRObject(): XMLHttpRequest {\r\n\r\n\r\n    if (typeof XMLHttpRequest !== \"undefined\") {\r\n      return new XMLHttpRequest();\r\n    }\r\n\r\n    throw new Error(\"XMLHttpRequest is not supported\");\r\n  }\r\n}\r\n\r\nXhrFileReader._config = {\r\n  avoidHeadRequests: false,\r\n  disallowedXhrHeaders: [],\r\n  timeoutInSec: 30\r\n};\r\n\r\nexport default XhrFileReader;\r\n","import ChunkedFileData from \"./ChunkedFileData\";\r\nimport MediaFileReader from \"./MediaFileReader\";\r\n\r\nimport type { LoadCallbackType } from \"./FlowTypes\";\r\n\r\nclass BlobFileReader extends MediaFileReader {\r\n  _blob: Blob;\r\n  _fileData: ChunkedFileData;\r\n\r\n  constructor(blob: Blob) {\r\n    super();\r\n    this._blob = blob;\r\n    this._fileData = new ChunkedFileData();\r\n  }\r\n\r\n  static canReadFile(file: any): boolean {\r\n    return (\r\n      (typeof Blob !== \"undefined\" && file instanceof Blob) ||\r\n      // File extends Blob but it seems that File instanceof Blob doesn't\r\n      // quite work as expected in Cordova/PhoneGap.\r\n      (typeof File !== \"undefined\" && file instanceof File)\r\n    );\r\n  }\r\n\r\n  _init(callbacks: LoadCallbackType): void {\r\n    this._size = this._blob.size;\r\n    setTimeout(callbacks.onSuccess, 1);\r\n  }\r\n\r\n  loadRange(range: [number, number], callbacks: LoadCallbackType): void {\r\n    var self = this;\r\n    // $FlowIssue - flow isn't aware of mozSlice or webkitSlice\r\n    var blobSlice = this._blob.slice\r\n    var blob = blobSlice.call(this._blob, range[0], range[1] + 1);\r\n    var browserFileReader = new FileReader();\r\n\r\n    browserFileReader.onloadend = function (event) {\r\n      var intArray = new Uint8Array(browserFileReader.result);\r\n      self._fileData.addData(range[0], intArray);\r\n      callbacks.onSuccess();\r\n    };\r\n    browserFileReader.onerror = browserFileReader.onabort = function (event) {\r\n      if (callbacks.onError) {\r\n        callbacks.onError({ type: \"blob\", info: browserFileReader.error });\r\n      }\r\n    };\r\n\r\n    browserFileReader.readAsArrayBuffer(blob);\r\n  }\r\n\r\n  getByteAt(offset: number): number {\r\n    return this._fileData.getByteAt(offset);\r\n  }\r\n}\r\n\r\nexport default BlobFileReader;\r\n","import MediaFileReader from \"./MediaFileReader\";\r\n\r\nimport type { Byte, ByteArray, LoadCallbackType } from \"./FlowTypes\";\r\n\r\nclass ArrayFileReader extends MediaFileReader {\r\n  _array: ByteArray;\r\n  _size: number;\r\n\r\n  constructor(array: ByteArray) {\r\n    super();\r\n    this._array = array;\r\n    this._size = array.length;\r\n    this._isInitialized = true;\r\n  }\r\n\r\n  static canReadFile(file: any): boolean {\r\n    return (\r\n      Array.isArray(file) ||\r\n      (typeof Buffer === \"function\" && Buffer.isBuffer(file))\r\n    );\r\n  }\r\n\r\n  init(callbacks: LoadCallbackType) {\r\n    setTimeout(callbacks.onSuccess, 0);\r\n  }\r\n\r\n  loadRange(range: [number, number], callbacks: LoadCallbackType) {\r\n    setTimeout(callbacks.onSuccess, 0);\r\n  }\r\n\r\n  getByteAt(offset: number): Byte {\r\n    if (offset >= this._array.length) {\r\n      throw new Error(\"Offset \" + offset + \" hasn't been loaded yet.\");\r\n    }\r\n    return this._array[offset];\r\n  }\r\n}\r\n\r\nexport default ArrayFileReader;\r\n","import MediaFileReader from \"./MediaFileReader\";\r\n\r\nimport type {\r\n  CallbackType,\r\n  LoadCallbackType,\r\n  ByteRange,\r\n  TagType,\r\n} from \"./FlowTypes\";\r\n\r\nclass MediaTagReader {\r\n  _mediaFileReader: MediaFileReader;\r\n  _tags?: Array<string> | null;\r\n\r\n  constructor(mediaFileReader: MediaFileReader) {\r\n    this._mediaFileReader = mediaFileReader;\r\n    this._tags = null;\r\n  }\r\n\r\n  /**\r\n   * Returns the byte range that needs to be loaded and fed to\r\n   * _canReadTagFormat in order to identify if the file contains tag\r\n   * information that can be read.\r\n   */\r\n  static getTagIdentifierByteRange(): ByteRange {\r\n    throw new Error(\"Must implement\");\r\n  }\r\n\r\n  /**\r\n   * Given a tag identifier (read from the file byte positions speficied by\r\n   * getTagIdentifierByteRange) this function checks if it can read the tag\r\n   * format or not.\r\n   */\r\n  static canReadTagFormat(tagIdentifier: Array<number>): boolean {\r\n    throw new Error(\"Must implement\");\r\n  }\r\n\r\n  setTagsToRead(tags: Array<string>): MediaTagReader {\r\n    this._tags = tags;\r\n    return this;\r\n  }\r\n\r\n  read(callbacks: CallbackType) {\r\n    var self = this;\r\n\r\n    this._mediaFileReader.init({\r\n      onSuccess: function () {\r\n        self._loadData(self._mediaFileReader, {\r\n          onSuccess: function () {\r\n            try {\r\n              var tags = self._parseData(self._mediaFileReader, self._tags);\r\n            } catch (ex) {\r\n              if (callbacks.onError) {\r\n                callbacks.onError({\r\n                  type: \"parseData\",\r\n                  info: ex.message,\r\n                });\r\n                return;\r\n              }\r\n            }\r\n\r\n            // TODO: destroy mediaFileReader\r\n            callbacks.onSuccess(tags);\r\n          },\r\n          onError: callbacks.onError,\r\n        });\r\n      },\r\n      onError: callbacks.onError,\r\n    });\r\n  }\r\n\r\n  getShortcuts(): { [key: string]: string | Array<string> } {\r\n    return {};\r\n  }\r\n\r\n  /**\r\n   * Load the necessary bytes from the media file.\r\n   */\r\n  _loadData(\r\n    mediaFileReader: MediaFileReader,\r\n    callbacks: LoadCallbackType\r\n  ): void {\r\n    throw new Error(\"Must implement _loadData function\");\r\n  }\r\n\r\n  /**\r\n   * Parse the loaded data to read the media tags.\r\n   */\r\n  _parseData(mediaFileReader: MediaFileReader, tags: Array<string>): TagType {\r\n    throw new Error(\"Must implement _parseData function\");\r\n  }\r\n\r\n  _expandShortcutTags(tagsWithShortcuts: Array<string>): Array<string> | null {\r\n    if (!tagsWithShortcuts) {\r\n      return null;\r\n    }\r\n\r\n    var tags = [];\r\n    var shortcuts = this.getShortcuts();\r\n    for (\r\n      var i = 0, tagOrShortcut;\r\n      (tagOrShortcut = tagsWithShortcuts[i]);\r\n      i++\r\n    ) {\r\n      tags = tags.concat(shortcuts[tagOrShortcut] || [tagOrShortcut]);\r\n    }\r\n\r\n    return tags;\r\n  }\r\n}\r\n\r\nexport default MediaTagReader;\r\n","\r\n\r\n\r\nimport MediaFileReader from './MediaFileReader';\r\n\r\nimport type {\r\n  LoadCallbackType,\r\n  ByteRange,\r\n  TagType\r\n} from './FlowTypes';\r\nimport MediaTagReader from './MediaTagReader';\r\n\r\nclass ID3v1TagReader extends MediaTagReader {\r\n  static getTagIdentifierByteRange(): ByteRange {\r\n    // The identifier is TAG and is at offset: -128. However, to avoid a\r\n    // fetch for the tag identifier and another for the data, we load the\r\n    // entire data since it's so small.\r\n    return {\r\n      offset: -128,\r\n      length: 128\r\n    };\r\n  }\r\n\r\n  static canReadTagFormat(tagIdentifier: Array<number>): boolean {\r\n    var id = String.fromCharCode.apply(String, tagIdentifier.slice(0, 3));\r\n    return id === \"TAG\";\r\n  }\r\n\r\n  _loadData(mediaFileReader: MediaFileReader, callbacks: LoadCallbackType) {\r\n    var fileSize = mediaFileReader.getSize();\r\n    mediaFileReader.loadRange([fileSize - 128, fileSize - 1], callbacks);\r\n  }\r\n\r\n  _parseData(data: MediaFileReader, tags: Array<string>): TagType {\r\n    var offset = data.getSize() - 128;\r\n\r\n    var title = data.getStringWithCharsetAt(offset + 3, 30).toString();\r\n    var artist = data.getStringWithCharsetAt(offset + 33, 30).toString();\r\n    var album = data.getStringWithCharsetAt(offset + 63, 30).toString();\r\n    var year = data.getStringWithCharsetAt(offset + 93, 4).toString();\r\n\r\n    var trackFlag = data.getByteAt(offset + 97 + 28);\r\n    var track = data.getByteAt(offset + 97 + 29);\r\n    if (trackFlag == 0 && track != 0) {\r\n      var version = \"1.1\";\r\n      var comment = data.getStringWithCharsetAt(offset + 97, 28).toString();\r\n    } else {\r\n      var version = \"1.0\";\r\n      var comment = data.getStringWithCharsetAt(offset + 97, 30).toString();\r\n      track = 0;\r\n    }\r\n\r\n    var genreIdx = data.getByteAt(offset + 97 + 30);\r\n    if (genreIdx < 255) {\r\n      var genre = GENRES[genreIdx];\r\n    } else {\r\n      var genre = \"\";\r\n    }\r\n\r\n    var tag = {\r\n      \"type\": \"ID3\",\r\n      \"version\" : version,\r\n      \"tags\": {\r\n        \"title\" : title,\r\n        \"artist\" : artist,\r\n        \"album\" : album,\r\n        \"year\" : year,\r\n        \"comment\" : comment,\r\n        \"genre\" : genre\r\n      }\r\n    };\r\n\r\n    if (track) {\r\n      // $FlowIssue - flow is not happy with adding properties\r\n      tag.tags.track = track;\r\n    }\r\n\r\n    return tag;\r\n  }\r\n}\r\n\r\nvar GENRES = [\r\n  \"Blues\",\"Classic Rock\",\"Country\",\"Dance\",\"Disco\",\"Funk\",\"Grunge\",\r\n  \"Hip-Hop\",\"Jazz\",\"Metal\",\"New Age\",\"Oldies\",\"Other\",\"Pop\",\"R&B\",\r\n  \"Rap\",\"Reggae\",\"Rock\",\"Techno\",\"Industrial\",\"Alternative\",\"Ska\",\r\n  \"Death Metal\",\"Pranks\",\"Soundtrack\",\"Euro-Techno\",\"Ambient\",\r\n  \"Trip-Hop\",\"Vocal\",\"Jazz+Funk\",\"Fusion\",\"Trance\",\"Classical\",\r\n  \"Instrumental\",\"Acid\",\"House\",\"Game\",\"Sound Clip\",\"Gospel\",\r\n  \"Noise\",\"AlternRock\",\"Bass\",\"Soul\",\"Punk\",\"Space\",\"Meditative\",\r\n  \"Instrumental Pop\",\"Instrumental Rock\",\"Ethnic\",\"Gothic\",\r\n  \"Darkwave\",\"Techno-Industrial\",\"Electronic\",\"Pop-Folk\",\r\n  \"Eurodance\",\"Dream\",\"Southern Rock\",\"Comedy\",\"Cult\",\"Gangsta\",\r\n  \"Top 40\",\"Christian Rap\",\"Pop/Funk\",\"Jungle\",\"Native American\",\r\n  \"Cabaret\",\"New Wave\",\"Psychadelic\",\"Rave\",\"Showtunes\",\"Trailer\",\r\n  \"Lo-Fi\",\"Tribal\",\"Acid Punk\",\"Acid Jazz\",\"Polka\",\"Retro\",\r\n  \"Musical\",\"Rock & Roll\",\"Hard Rock\",\"Folk\",\"Folk-Rock\",\r\n  \"National Folk\",\"Swing\",\"Fast Fusion\",\"Bebob\",\"Latin\",\"Revival\",\r\n  \"Celtic\",\"Bluegrass\",\"Avantgarde\",\"Gothic Rock\",\"Progressive Rock\",\r\n  \"Psychedelic Rock\",\"Symphonic Rock\",\"Slow Rock\",\"Big Band\",\r\n  \"Chorus\",\"Easy Listening\",\"Acoustic\",\"Humour\",\"Speech\",\"Chanson\",\r\n  \"Opera\",\"Chamber Music\",\"Sonata\",\"Symphony\",\"Booty Bass\",\"Primus\",\r\n  \"Porn Groove\",\"Satire\",\"Slow Jam\",\"Club\",\"Tango\",\"Samba\",\r\n  \"Folklore\",\"Ballad\",\"Power Ballad\",\"Rhythmic Soul\",\"Freestyle\",\r\n  \"Duet\",\"Punk Rock\",\"Drum Solo\",\"Acapella\",\"Euro-House\",\"Dance Hall\"\r\n];\r\n\r\nexport default ID3v1TagReader;\r\n","\r\nimport StringUtils from './StringUtils';\r\n\r\nimport type {\r\n  CharsetType,\r\n  FrameReaderSignature,\r\n  TagHeader,\r\n  TagFrames,\r\n  TagFrameHeader,\r\n  TagFrameFlags\r\n} from './FlowTypes';\r\nimport ArrayFileReader from './ArrayFileReader';\r\nimport MediaFileReader from './MediaFileReader';\r\n\r\nconst  frameReaderFunctions:Record<string,any> = {};\r\n\r\nconst FRAME_DESCRIPTIONS = {\r\n  // v2.2\r\n  \"BUF\" : \"Recommended buffer size\",\r\n  \"CNT\" : \"Play counter\",\r\n  \"COM\" : \"Comments\",\r\n  \"CRA\" : \"Audio encryption\",\r\n  \"CRM\" : \"Encrypted meta frame\",\r\n  \"ETC\" : \"Event timing codes\",\r\n  \"EQU\" : \"Equalization\",\r\n  \"GEO\" : \"General encapsulated object\",\r\n  \"IPL\" : \"Involved people list\",\r\n  \"LNK\" : \"Linked information\",\r\n  \"MCI\" : \"Music CD Identifier\",\r\n  \"MLL\" : \"MPEG location lookup table\",\r\n  \"PIC\" : \"Attached picture\",\r\n  \"POP\" : \"Popularimeter\",\r\n  \"REV\" : \"Reverb\",\r\n  \"RVA\" : \"Relative volume adjustment\",\r\n  \"SLT\" : \"Synchronized lyric/text\",\r\n  \"STC\" : \"Synced tempo codes\",\r\n  \"TAL\" : \"Album/Movie/Show title\",\r\n  \"TBP\" : \"BPM (Beats Per Minute)\",\r\n  \"TCM\" : \"Composer\",\r\n  \"TCO\" : \"Content type\",\r\n  \"TCR\" : \"Copyright message\",\r\n  \"TDA\" : \"Date\",\r\n  \"TDY\" : \"Playlist delay\",\r\n  \"TEN\" : \"Encoded by\",\r\n  \"TFT\" : \"File type\",\r\n  \"TIM\" : \"Time\",\r\n  \"TKE\" : \"Initial key\",\r\n  \"TLA\" : \"Language(s)\",\r\n  \"TLE\" : \"Length\",\r\n  \"TMT\" : \"Media type\",\r\n  \"TOA\" : \"Original artist(s)/performer(s)\",\r\n  \"TOF\" : \"Original filename\",\r\n  \"TOL\" : \"Original Lyricist(s)/text writer(s)\",\r\n  \"TOR\" : \"Original release year\",\r\n  \"TOT\" : \"Original album/Movie/Show title\",\r\n  \"TP1\" : \"Lead artist(s)/Lead performer(s)/Soloist(s)/Performing group\",\r\n  \"TP2\" : \"Band/Orchestra/Accompaniment\",\r\n  \"TP3\" : \"Conductor/Performer refinement\",\r\n  \"TP4\" : \"Interpreted, remixed, or otherwise modified by\",\r\n  \"TPA\" : \"Part of a set\",\r\n  \"TPB\" : \"Publisher\",\r\n  \"TRC\" : \"ISRC (International Standard Recording Code)\",\r\n  \"TRD\" : \"Recording dates\",\r\n  \"TRK\" : \"Track number/Position in set\",\r\n  \"TSI\" : \"Size\",\r\n  \"TSS\" : \"Software/hardware and settings used for encoding\",\r\n  \"TT1\" : \"Content group description\",\r\n  \"TT2\" : \"Title/Songname/Content description\",\r\n  \"TT3\" : \"Subtitle/Description refinement\",\r\n  \"TXT\" : \"Lyricist/text writer\",\r\n  \"TXX\" : \"User defined text information frame\",\r\n  \"TYE\" : \"Year\",\r\n  \"UFI\" : \"Unique file identifier\",\r\n  \"ULT\" : \"Unsychronized lyric/text transcription\",\r\n  \"WAF\" : \"Official audio file webpage\",\r\n  \"WAR\" : \"Official artist/performer webpage\",\r\n  \"WAS\" : \"Official audio source webpage\",\r\n  \"WCM\" : \"Commercial information\",\r\n  \"WCP\" : \"Copyright/Legal information\",\r\n  \"WPB\" : \"Publishers official webpage\",\r\n  \"WXX\" : \"User defined URL link frame\",\r\n  // v2.3\r\n  \"AENC\" : \"Audio encryption\",\r\n  \"APIC\" : \"Attached picture\",\r\n  \"ASPI\" : \"Audio seek point index\",\r\n  \"CHAP\" : \"Chapter\",\r\n  \"CTOC\" : \"Table of contents\",\r\n  \"COMM\" : \"Comments\",\r\n  \"COMR\" : \"Commercial frame\",\r\n  \"ENCR\" : \"Encryption method registration\",\r\n  \"EQU2\" : \"Equalisation (2)\",\r\n  \"EQUA\" : \"Equalization\",\r\n  \"ETCO\" : \"Event timing codes\",\r\n  \"GEOB\" : \"General encapsulated object\",\r\n  \"GRID\" : \"Group identification registration\",\r\n  \"IPLS\" : \"Involved people list\",\r\n  \"LINK\" : \"Linked information\",\r\n  \"MCDI\" : \"Music CD identifier\",\r\n  \"MLLT\" : \"MPEG location lookup table\",\r\n  \"OWNE\" : \"Ownership frame\",\r\n  \"PRIV\" : \"Private frame\",\r\n  \"PCNT\" : \"Play counter\",\r\n  \"POPM\" : \"Popularimeter\",\r\n  \"POSS\" : \"Position synchronisation frame\",\r\n  \"RBUF\" : \"Recommended buffer size\",\r\n  \"RVA2\" : \"Relative volume adjustment (2)\",\r\n  \"RVAD\" : \"Relative volume adjustment\",\r\n  \"RVRB\" : \"Reverb\",\r\n  \"SEEK\" : \"Seek frame\",\r\n  \"SYLT\" : \"Synchronized lyric/text\",\r\n  \"SYTC\" : \"Synchronized tempo codes\",\r\n  \"TALB\" : \"Album/Movie/Show title\",\r\n  \"TBPM\" : \"BPM (beats per minute)\",\r\n  \"TCOM\" : \"Composer\",\r\n  \"TCON\" : \"Content type\",\r\n  \"TCOP\" : \"Copyright message\",\r\n  \"TDAT\" : \"Date\",\r\n  \"TDLY\" : \"Playlist delay\",\r\n  \"TDRC\" : \"Recording time\",\r\n  \"TDRL\" : \"Release time\",\r\n  \"TDTG\" : \"Tagging time\",\r\n  \"TENC\" : \"Encoded by\",\r\n  \"TEXT\" : \"Lyricist/Text writer\",\r\n  \"TFLT\" : \"File type\",\r\n  \"TIME\" : \"Time\",\r\n  \"TIPL\" : \"Involved people list\",\r\n  \"TIT1\" : \"Content group description\",\r\n  \"TIT2\" : \"Title/songname/content description\",\r\n  \"TIT3\" : \"Subtitle/Description refinement\",\r\n  \"TKEY\" : \"Initial key\",\r\n  \"TLAN\" : \"Language(s)\",\r\n  \"TLEN\" : \"Length\",\r\n  \"TMCL\" : \"Musician credits list\",\r\n  \"TMED\" : \"Media type\",\r\n  \"TMOO\" : \"Mood\",\r\n  \"TOAL\" : \"Original album/movie/show title\",\r\n  \"TOFN\" : \"Original filename\",\r\n  \"TOLY\" : \"Original lyricist(s)/text writer(s)\",\r\n  \"TOPE\" : \"Original artist(s)/performer(s)\",\r\n  \"TORY\" : \"Original release year\",\r\n  \"TOWN\" : \"File owner/licensee\",\r\n  \"TPE1\" : \"Lead performer(s)/Soloist(s)\",\r\n  \"TPE2\" : \"Band/orchestra/accompaniment\",\r\n  \"TPE3\" : \"Conductor/performer refinement\",\r\n  \"TPE4\" : \"Interpreted, remixed, or otherwise modified by\",\r\n  \"TPOS\" : \"Part of a set\",\r\n  \"TPRO\" : \"Produced notice\",\r\n  \"TPUB\" : \"Publisher\",\r\n  \"TRCK\" : \"Track number/Position in set\",\r\n  \"TRDA\" : \"Recording dates\",\r\n  \"TRSN\" : \"Internet radio station name\",\r\n  \"TRSO\" : \"Internet radio station owner\",\r\n  \"TSOA\" : \"Album sort order\",\r\n  \"TSOP\" : \"Performer sort order\",\r\n  \"TSOT\" : \"Title sort order\",\r\n  \"TSIZ\" : \"Size\",\r\n  \"TSRC\" : \"ISRC (international standard recording code)\",\r\n  \"TSSE\" : \"Software/Hardware and settings used for encoding\",\r\n  \"TSST\" : \"Set subtitle\",\r\n  \"TYER\" : \"Year\",\r\n  \"TXXX\" : \"User defined text information frame\",\r\n  \"UFID\" : \"Unique file identifier\",\r\n  \"USER\" : \"Terms of use\",\r\n  \"USLT\" : \"Unsychronized lyric/text transcription\",\r\n  \"WCOM\" : \"Commercial information\",\r\n  \"WCOP\" : \"Copyright/Legal information\",\r\n  \"WOAF\" : \"Official audio file webpage\",\r\n  \"WOAR\" : \"Official artist/performer webpage\",\r\n  \"WOAS\" : \"Official audio source webpage\",\r\n  \"WORS\" : \"Official internet radio station homepage\",\r\n  \"WPAY\" : \"Payment\",\r\n  \"WPUB\" : \"Publishers official webpage\",\r\n  \"WXXX\" : \"User defined URL link frame\"\r\n};\r\n\r\nclass ID3v2FrameReader {\r\n  static getFrameReaderFunction(frameId: string): FrameReaderSignature {\r\n    if (frameId in frameReaderFunctions) {\r\n      return frameReaderFunctions[frameId];\r\n    } else if (frameId[0] === \"T\") {\r\n      // All frame ids starting with T are text tags.\r\n      return frameReaderFunctions[\"T*\"];\r\n    } else if (frameId[0] === \"W\") {\r\n      // All frame ids starting with W are url tags.\r\n      return frameReaderFunctions[\"W*\"];\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  /**\r\n   * All the frames consists of a frame header followed by one or more fields\r\n   * containing the actual information.\r\n   * The frame ID made out of the characters capital A-Z and 0-9. Identifiers\r\n   * beginning with \"X\", \"Y\" and \"Z\" are for experimental use and free for\r\n   * everyone to use, without the need to set the experimental bit in the tag\r\n   * header. Have in mind that someone else might have used the same identifier\r\n   * as you. All other identifiers are either used or reserved for future use.\r\n   * The frame ID is followed by a size descriptor, making a total header size\r\n   * of ten bytes in every frame. The size is calculated as frame size excluding\r\n   * frame header (frame size - 10).\r\n   */\r\n  static readFrames(\r\n    offset: number,\r\n    end: number,\r\n    data: MediaFileReader,\r\n    id3header: TagHeader,\r\n    tags:Array<string>\r\n  ): TagFrames {\r\n    var frames = {};\r\n    var frameHeaderSize = this._getFrameHeaderSize(id3header);\r\n    // console.log('header', id3header);\r\n    while (\r\n      // we should be able to read at least the frame header\r\n      offset < (end - frameHeaderSize)\r\n    ) {\r\n      var header = this._readFrameHeader(data, offset, id3header);\r\n      var frameId = header.id;\r\n\r\n      // No frame ID sometimes means it's the last frame (GTFO).\r\n      if (!frameId) {\r\n        break;\r\n      }\r\n\r\n      var flags = header.flags;\r\n      var frameSize = header.size;\r\n      var frameDataOffset = offset + header.headerSize;\r\n      var frameData = data;\r\n\r\n      // console.log(offset, frameId, header.size + header.headerSize, flags && flags.format.unsynchronisation);\r\n      // advance data offset to the next frame data\r\n      offset += header.headerSize + header.size;\r\n\r\n      // skip unwanted tags\r\n      if (tags && tags.indexOf(frameId) === -1) {\r\n        continue;\r\n      }\r\n      // Workaround: MP3ext V3.3.17 places a non-compliant padding string at\r\n      // the end of the ID3v2 header. A string like \"MP3ext V3.3.19(ansi)\"\r\n      // is added multiple times at the end of the ID3 tag. More information\r\n      // about this issue can be found at\r\n      // https://github.com/aadsm/jsmediatags/issues/58#issuecomment-313865336\r\n      if (\r\n        frameId === 'MP3e' || frameId === '\\x00MP3' ||\r\n        frameId === '\\x00\\x00MP' || frameId === ' MP3'\r\n      ) {\r\n        break;\r\n      }\r\n\r\n      var unsyncData;\r\n      if (flags && flags.format.unsynchronisation && !id3header.flags.unsynchronisation) {\r\n        frameData = this.getUnsyncFileReader(frameData, frameDataOffset, frameSize);\r\n        frameDataOffset = 0;\r\n        frameSize = frameData.getSize();\r\n      }\r\n\r\n      // the first 4 bytes are the real data size\r\n      // (after unsynchronisation && encryption)\r\n      if (flags && flags.format.data_length_indicator) {\r\n        // var frameDataSize = frameData.getSynchsafeInteger32At(frameDataOffset);\r\n        frameDataOffset += 4;\r\n        frameSize -= 4;\r\n      }\r\n\r\n      var readFrameFunc = ID3v2FrameReader.getFrameReaderFunction(frameId);\r\n      var parsedData = readFrameFunc ? readFrameFunc.apply(this, [frameDataOffset, frameSize, frameData, flags, id3header]) : null;\r\n      var desc = this._getFrameDescription(frameId);\r\n\r\n      var frame = {\r\n        id: frameId,\r\n        size: frameSize,\r\n        description: desc,\r\n        data: parsedData\r\n      };\r\n\r\n      if( frameId in frames ) {\r\n        if( frames[frameId].id ) {\r\n          frames[frameId] = [frames[frameId]];\r\n        }\r\n        frames[frameId].push(frame);\r\n      } else {\r\n        frames[frameId] = frame;\r\n      }\r\n    }\r\n\r\n    return frames;\r\n  }\r\n\r\n  static _getFrameHeaderSize(id3header: TagHeader): number {\r\n    var major = id3header.major;\r\n\r\n    if (major == 2) {\r\n      return 6;\r\n    } else if (major == 3 || major == 4) {\r\n      return 10;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  static _readFrameHeader(\r\n    data: MediaFileReader,\r\n    offset: number,\r\n    id3header: TagHeader\r\n  ): TagFrameHeader {\r\n    var major = id3header.major;\r\n    var flags = null;\r\n    var frameHeaderSize = this._getFrameHeaderSize(id3header);\r\n\r\n    switch (major) {\r\n      case 2:\r\n      var frameId = data.getStringAt(offset, 3);\r\n      var frameSize = data.getInteger24At(offset+3, true);\r\n      break;\r\n\r\n      case 3:\r\n      var frameId = data.getStringAt(offset, 4);\r\n      var frameSize = data.getLongAt(offset+4, true);\r\n      break;\r\n\r\n      case 4:\r\n      var frameId = data.getStringAt(offset, 4);\r\n      var frameSize = data.getSynchsafeInteger32At(offset+4);\r\n      break;\r\n    }\r\n\r\n    if (\r\n      frameId == String.fromCharCode(0,0,0) ||\r\n      frameId == String.fromCharCode(0,0,0,0)\r\n    ) {\r\n      frameId = \"\";\r\n    }\r\n\r\n    // if frameId is empty then it's the last frame\r\n    if (frameId) {\r\n      // read frame message and format flags\r\n      if (major > 2) {\r\n        flags = this._readFrameFlags(data, offset+8);\r\n      }\r\n    }\r\n\r\n    return {\r\n      \"id\": frameId || \"\",\r\n      \"size\": frameSize || 0,\r\n      \"headerSize\": frameHeaderSize || 0,\r\n      \"flags\": flags\r\n    };\r\n  }\r\n\r\n  static _readFrameFlags(data: MediaFileReader, offset: number): TagFrameFlags {\r\n    return {\r\n      message: {\r\n        tag_alter_preservation  : data.isBitSetAt(offset, 6),\r\n        file_alter_preservation : data.isBitSetAt(offset, 5),\r\n        read_only               : data.isBitSetAt(offset, 4)\r\n      },\r\n      format: {\r\n        grouping_identity       : data.isBitSetAt(offset+1, 7),\r\n        compression             : data.isBitSetAt(offset+1, 3),\r\n        encryption              : data.isBitSetAt(offset+1, 2),\r\n        unsynchronisation       : data.isBitSetAt(offset+1, 1),\r\n        data_length_indicator   : data.isBitSetAt(offset+1, 0)\r\n      }\r\n    };\r\n  }\r\n\r\n  static _getFrameDescription(frameId: string): string {\r\n    if (frameId in FRAME_DESCRIPTIONS) {\r\n      return FRAME_DESCRIPTIONS[frameId];\r\n    } else {\r\n      return 'Unknown';\r\n    }\r\n  }\r\n\r\n  static getUnsyncFileReader(\r\n    data: MediaFileReader,\r\n    offset: number,\r\n    size: number\r\n  ): MediaFileReader {\r\n    var frameData = data.getBytesAt(offset, size);\r\n    for (var i = 0; i < frameData.length - 1; i++) {\r\n      if (frameData[i] === 0xff && frameData[i+1] === 0x00) {\r\n        frameData.splice(i+1, 1);\r\n      }\r\n    }\r\n\r\n    return new ArrayFileReader(frameData);\r\n  }\r\n};\r\n\r\nframeReaderFunctions['APIC'] = function readPictureFrame(\r\n  offset: number,\r\n  length: number,\r\n  data: MediaFileReader,\r\n  flags:Object,\r\n  id3header?: TagHeader\r\n): any {\r\n  var start = offset;\r\n  var charset = getTextEncoding(data.getByteAt(offset));\r\n  switch (id3header && id3header.major) {\r\n    case 2:\r\n    var format = data.getStringAt(offset+1, 3);\r\n    offset += 4;\r\n    break;\r\n\r\n    case 3:\r\n    case 4:\r\n    var format = data.getStringWithCharsetAt(offset+1, length - 1);\r\n    offset += 1 + format.bytesReadCount;\r\n    break;\r\n\r\n    default:\r\n    throw new Error(\"Couldn't read ID3v2 major version.\");\r\n  }\r\n  var bite = data.getByteAt(offset);\r\n  var type = PICTURE_TYPE[bite];\r\n  var desc = data.getStringWithCharsetAt(offset+1, length - (offset-start) - 1, charset);\r\n\r\n  offset += 1 + desc.bytesReadCount;\r\n\r\n  return {\r\n    \"format\" : format.toString(),\r\n    \"type\" : type,\r\n    \"description\" : desc.toString(),\r\n    \"data\" : data.getBytesAt(offset, (start+length) - offset)\r\n  };\r\n};\r\n\r\n// ID3v2 chapters according to http://id3.org/id3v2-chapters-1.0\r\nframeReaderFunctions['CHAP'] = function readChapterFrame(\r\n  offset: number,\r\n  length: number,\r\n  data: MediaFileReader,\r\n  flags:Object,\r\n  id3header?: TagHeader\r\n): any {\r\n  var originalOffset = offset;\r\n  var result = {};\r\n  var id = StringUtils.readNullTerminatedString(data.getBytesAt(offset, length));\r\n  result.id = id.toString();\r\n  offset += id.bytesReadCount;\r\n  result.startTime = data.getLongAt(offset, true);\r\n  offset+=4;\r\n  result.endTime = data.getLongAt(offset, true);\r\n  offset+=4;\r\n  result.startOffset = data.getLongAt(offset, true);\r\n  offset+=4;\r\n  result.endOffset = data.getLongAt(offset, true);\r\n  offset+=4;\r\n\r\n  var remainingLength = length - (offset - originalOffset);\r\n  result.subFrames = this.readFrames(offset, offset + remainingLength, data, id3header);\r\n  return result;\r\n};\r\n\r\n// ID3v2 table of contents according to http://id3.org/id3v2-chapters-1.0\r\nframeReaderFunctions['CTOC'] = function readTableOfContentsFrame(\r\n  offset: number,\r\n  length: number,\r\n  data: MediaFileReader,\r\n  flags:Object,\r\n  id3header?: TagHeader\r\n): any {\r\n  var originalOffset = offset;\r\n  var result = { childElementIds: [], id: undefined, topLevel: undefined, ordered: undefined, entryCount: undefined, subFrames: undefined };\r\n  var id = StringUtils.readNullTerminatedString(data.getBytesAt(offset, length));\r\n  result.id = id.toString();\r\n  offset += id.bytesReadCount;\r\n  result.topLevel = data.isBitSetAt(offset, 1);\r\n  result.ordered = data.isBitSetAt(offset, 0);\r\n  offset++;\r\n  result.entryCount = data.getByteAt(offset);\r\n  offset++;\r\n  for (var i = 0; i < result.entryCount; i++) {\r\n    var childId = StringUtils.readNullTerminatedString(data.getBytesAt(offset, length - (offset - originalOffset)));\r\n    result.childElementIds.push(childId.toString());\r\n    offset += childId.bytesReadCount;\r\n  }\r\n\r\n  var remainingLength = length - (offset - originalOffset);\r\n  result.subFrames = this.readFrames(offset, offset + remainingLength, data, id3header);\r\n  return result;\r\n}\r\n\r\nframeReaderFunctions['COMM'] = function readCommentsFrame(\r\n  offset: number,\r\n  length: number,\r\n  data: MediaFileReader,\r\n  flags:Object,\r\n  id3header?: TagHeader\r\n): any {\r\n  var start = offset;\r\n  var charset = getTextEncoding(data.getByteAt(offset));\r\n  var language = data.getStringAt( offset+1, 3 );\r\n  var shortdesc = data.getStringWithCharsetAt(offset+4, length-4, charset);\r\n\r\n  offset += 4 + shortdesc.bytesReadCount;\r\n  var text = data.getStringWithCharsetAt( offset, (start+length) - offset, charset );\r\n\r\n  return {\r\n    language : language,\r\n    short_description : shortdesc.toString(),\r\n    text : text.toString()\r\n  };\r\n};\r\n\r\nframeReaderFunctions['COM'] = frameReaderFunctions['COMM'];\r\n\r\nframeReaderFunctions['PIC'] = function(\r\n  offset: number,\r\n  length: number,\r\n  data: MediaFileReader,\r\n  flags:Object,\r\n  id3header?: TagHeader\r\n): any {\r\n  return frameReaderFunctions['APIC'](offset, length, data, flags, id3header);\r\n};\r\n\r\nframeReaderFunctions['PCNT'] = function readCounterFrame(\r\n  offset: number,\r\n  length: number,\r\n  data: MediaFileReader,\r\n  flags:Object,\r\n  id3header?: TagHeader\r\n): any {\r\n  // FIXME: implement the rest of the spec\r\n  return data.getLongAt(offset, false);\r\n};\r\n\r\nframeReaderFunctions['CNT'] = frameReaderFunctions['PCNT'];\r\n\r\nframeReaderFunctions['T*'] = function readTextFrame(\r\n  offset: number,\r\n  length: number,\r\n  data: MediaFileReader,\r\n  flags:Object,\r\n  id3header?: TagHeader\r\n): any {\r\n  var charset = getTextEncoding(data.getByteAt(offset));\r\n\r\n  return data.getStringWithCharsetAt(offset+1, length-1, charset).toString();\r\n};\r\n\r\nframeReaderFunctions['TXXX'] = function readTextFrame(\r\n  offset: number,\r\n  length: number,\r\n  data: MediaFileReader,\r\n  flags:Object,\r\n  id3header?: TagHeader\r\n): Object {\r\n  var charset = getTextEncoding(data.getByteAt(offset));\r\n\r\n  return getUserDefinedFields(offset, length, data, charset);\r\n};\r\n\r\nframeReaderFunctions['WXXX'] = function readUrlFrame(\r\n  offset: number,\r\n  length: number,\r\n  data: MediaFileReader,\r\n  flags: Object,\r\n  id3header?: TagHeader\r\n):Object {\r\n  if (length === 0) {\r\n    return null;\r\n  }\r\n  var charset = getTextEncoding(data.getByteAt(offset));\r\n  return getUserDefinedFields(offset, length, data, charset);\r\n};\r\n\r\nframeReaderFunctions['W*'] = function readUrlFrame(\r\n  offset: number,\r\n  length: number,\r\n  data: MediaFileReader,\r\n  flags: Object,\r\n  id3header?: TagHeader\r\n):string {\r\n  if (length === 0) {\r\n    return null;\r\n  }\r\n  return data.getStringWithCharsetAt(offset, length, 'iso-8859-1').toString();\r\n};\r\n\r\nframeReaderFunctions['TCON'] = function readGenreFrame(\r\n  offset: number,\r\n  length: number,\r\n  data: MediaFileReader,\r\n  flags?: Object\r\n): any {\r\n  var text = frameReaderFunctions['T*'].apply(this, arguments);\r\n  return text.replace(/^\\(\\d+\\)/, '');\r\n};\r\n\r\nframeReaderFunctions['TCO'] = frameReaderFunctions['TCON'];\r\n\r\nframeReaderFunctions['USLT'] = function readLyricsFrame(\r\n  offset: number,\r\n  length: number,\r\n  data: MediaFileReader,\r\n  flags: Object,\r\n  id3header?: TagHeader\r\n): any {\r\n  var start = offset;\r\n  var charset = getTextEncoding(data.getByteAt(offset));\r\n  var language = data.getStringAt(offset+1, 3);\r\n  var descriptor = data.getStringWithCharsetAt(offset+4, length-4, charset);\r\n\r\n  offset += 4 + descriptor.bytesReadCount;\r\n  var lyrics = data.getStringWithCharsetAt( offset, (start+length) - offset, charset );\r\n\r\n  return {\r\n    language : language,\r\n    descriptor : descriptor.toString(),\r\n    lyrics : lyrics.toString()\r\n  };\r\n};\r\n\r\nframeReaderFunctions['ULT'] = frameReaderFunctions['USLT'];\r\n\r\nframeReaderFunctions['UFID'] = function readLyricsFrame(\r\n  offset: number,\r\n  length: number,\r\n  data: MediaFileReader,\r\n  flags:Object,\r\n  id3header?: TagHeader\r\n): any {\r\n  var ownerIdentifier =\r\n    StringUtils.readNullTerminatedString(data.getBytesAt(offset, length));\r\n  offset += ownerIdentifier.bytesReadCount;\r\n  var identifier = data.getBytesAt(\r\n    offset, length - ownerIdentifier.bytesReadCount\r\n  );\r\n\r\n  return {\r\n    ownerIdentifier: ownerIdentifier.toString(),\r\n    identifier: identifier\r\n  };\r\n};\r\n\r\nfunction getTextEncoding(bite): CharsetType {\r\n  var charset:CharsetType;\r\n\r\n  switch (bite)\r\n  {\r\n    case 0x00:\r\n    charset = 'iso-8859-1';\r\n    break;\r\n\r\n    case 0x01:\r\n    charset = 'utf-16';\r\n    break;\r\n\r\n    case 0x02:\r\n    charset = 'utf-16be';\r\n    break;\r\n\r\n    case 0x03:\r\n    charset = 'utf-8';\r\n    break;\r\n\r\n    default:\r\n    charset = 'iso-8859-1';\r\n  }\r\n\r\n  return charset;\r\n}\r\n\r\n// Handles reading description/data from either http://id3.org/id3v2.3.0#User_defined_text_information_frame\r\n// and http://id3.org/id3v2.3.0#User_defined_URL_link_frame\r\nfunction getUserDefinedFields(\r\n  offset: number,\r\n  length: number,\r\n  data: MediaFileReader,\r\n  charset: CharsetType\r\n): Object {\r\n  var userDesc = data.getStringWithCharsetAt(offset + 1, length - 1, charset);\r\n  var userDefinedData = data.getStringWithCharsetAt(offset + 1 + userDesc.bytesReadCount, length - 1 - userDesc.bytesReadCount, charset);\r\n\r\n  return {\r\n    user_description: userDesc.toString(),\r\n    data: userDefinedData.toString()\r\n  };\r\n}\r\n\r\nvar PICTURE_TYPE = [\r\n  \"Other\",\r\n  \"32x32 pixels 'file icon' (PNG only)\",\r\n  \"Other file icon\",\r\n  \"Cover (front)\",\r\n  \"Cover (back)\",\r\n  \"Leaflet page\",\r\n  \"Media (e.g. label side of CD)\",\r\n  \"Lead artist/lead performer/soloist\",\r\n  \"Artist/performer\",\r\n  \"Conductor\",\r\n  \"Band/Orchestra\",\r\n  \"Composer\",\r\n  \"Lyricist/text writer\",\r\n  \"Recording Location\",\r\n  \"During recording\",\r\n  \"During performance\",\r\n  \"Movie/video screen capture\",\r\n  \"A bright coloured fish\",\r\n  \"Illustration\",\r\n  \"Band/artist logotype\",\r\n  \"Publisher/Studio logotype\"\r\n];\r\n\r\nexport default ID3v2FrameReader;\r\n","\r\n\r\n\r\nimport MediaFileReader from './MediaFileReader';\r\n\r\nimport type {\r\n  CallbackType,\r\n  LoadCallbackType,\r\n  TagFrames,\r\n  TagHeader,\r\n  TagFrameHeader,\r\n  TagFrameFlags,\r\n  CharsetType,\r\n  ByteRange,\r\n  TagType,\r\n} from './FlowTypes';\r\nimport ID3v2FrameReader from './ID3v2FrameReader';\r\nimport MediaTagReader from './MediaTagReader';\r\n\r\nconst ID3_HEADER_SIZE = 10;\r\n\r\nclass ID3v2TagReader extends MediaTagReader {\r\n  static getTagIdentifierByteRange(): ByteRange {\r\n    // ID3 header\r\n    return {\r\n      offset: 0,\r\n      length: ID3_HEADER_SIZE\r\n    };\r\n  }\r\n\r\n  static canReadTagFormat(tagIdentifier: Array<number>): boolean {\r\n    var id = String.fromCharCode.apply(String, tagIdentifier.slice(0, 3));\r\n    return id === 'ID3';\r\n  }\r\n\r\n  _loadData(mediaFileReader: MediaFileReader, callbacks: LoadCallbackType) {\r\n    mediaFileReader.loadRange([6, 9], {\r\n      onSuccess: function() {\r\n        mediaFileReader.loadRange(\r\n          // The tag size does not include the header size.\r\n          [0, ID3_HEADER_SIZE + mediaFileReader.getSynchsafeInteger32At(6) - 1],\r\n          callbacks\r\n        );\r\n      },\r\n      onError: callbacks.onError\r\n    });\r\n  }\r\n\r\n  _parseData(data: MediaFileReader, tags?: Array<string>): TagType {\r\n    var offset = 0;\r\n    var major = data.getByteAt(offset+3);\r\n    if (major > 4) { return {\"type\": \"ID3\", \"version\": \">2.4\", \"tags\": {}}; }\r\n    var revision = data.getByteAt(offset+4);\r\n    var unsynch = data.isBitSetAt(offset+5, 7);\r\n    var xheader = data.isBitSetAt(offset+5, 6);\r\n    var xindicator = data.isBitSetAt(offset+5, 5);\r\n    var size = data.getSynchsafeInteger32At(offset+6);\r\n    offset += 10;\r\n\r\n    if( xheader ) {\r\n      // We skip the extended header and don't offer support for it right now.\r\n      if (major === 4) {\r\n        var xheadersize = data.getSynchsafeInteger32At(offset);\r\n        offset += xheadersize;\r\n      } else {\r\n        var xheadersize = data.getLongAt(offset, true);\r\n        // The 'Extended header size', currently 6 or 10 bytes, excludes itself.\r\n        offset += xheadersize + 4;\r\n      }\r\n    }\r\n\r\n    var id3 = {\r\n      \"type\": \"ID3\",\r\n      \"version\" : '2.' + major + '.' + revision,\r\n      \"major\" : major,\r\n      \"revision\" : revision,\r\n      \"flags\" : {\r\n        \"unsynchronisation\" : unsynch,\r\n        \"extended_header\" : xheader,\r\n        \"experimental_indicator\" : xindicator,\r\n        // TODO: footer_present\r\n        \"footer_present\" : false\r\n      },\r\n      \"size\" : size,\r\n      \"tags\": {},\r\n    };\r\n\r\n    if (tags) {\r\n      var expandedTags = this._expandShortcutTags(tags);\r\n    }\r\n\r\n    var offsetEnd = size + 10/*header size*/;\r\n    // When this flag is set the entire tag needs to be un-unsynchronised\r\n    // before parsing each individual frame. Individual frame sizes might not\r\n    // take unsynchronisation into consideration when it's set on the tag\r\n    // header.\r\n    if (id3.flags.unsynchronisation) {\r\n      data = ID3v2FrameReader.getUnsyncFileReader(data, offset, size);\r\n      offset = 0;\r\n      offsetEnd = data.getSize();\r\n    }\r\n\r\n    var frames = ID3v2FrameReader.readFrames(offset, offsetEnd, data, id3, expandedTags);\r\n    // create shortcuts for most common data.\r\n    for (var name in SHORTCUTS) if (SHORTCUTS.hasOwnProperty(name)) {\r\n      var frameData = this._getFrameData(frames, SHORTCUTS[name]);\r\n      if (frameData) {\r\n        id3.tags[name] = frameData;\r\n      }\r\n    }\r\n\r\n    for (var frame in frames) if (frames.hasOwnProperty(frame)) {\r\n      id3.tags[frame] = frames[frame];\r\n    }\r\n\r\n    return id3;\r\n  }\r\n\r\n  _getFrameData(frames: TagFrames, ids: Array<string>): Object {\r\n    var frame;\r\n    for (var i = 0, id; id = ids[i]; i++) {\r\n      if (id in frames) {\r\n        if (frames[id] instanceof Array) {\r\n          frame = frames[id][0];\r\n        } else {\r\n          frame = frames[id];\r\n        }\r\n        return frame.data;\r\n      }\r\n    }\r\n  }\r\n\r\n  getShortcuts(): {[key: string]: string|Array<string>} {\r\n    return SHORTCUTS;\r\n  }\r\n}\r\n\r\n\r\nconst SHORTCUTS = {\r\n  \"title\"     : [\"TIT2\", \"TT2\"],\r\n  \"artist\"    : [\"TPE1\", \"TP1\"],\r\n  \"album\"     : [\"TALB\", \"TAL\"],\r\n  \"year\"      : [\"TYER\", \"TYE\"],\r\n  \"comment\"   : [\"COMM\", \"COM\"],\r\n  \"track\"     : [\"TRCK\", \"TRK\"],\r\n  \"genre\"     : [\"TCON\", \"TCO\"],\r\n  \"picture\"   : [\"APIC\", \"PIC\"],\r\n  \"lyrics\"    : [\"USLT\", \"ULT\"]\r\n};\r\n\r\nexport default ID3v2TagReader;\r\n","/**\r\n * Support for iTunes-style m4a tags\r\n * See:\r\n *   http://atomicparsley.sourceforge.net/mpeg-4files.html\r\n *   http://developer.apple.com/mac/library/documentation/QuickTime/QTFF/Metadata/Metadata.html\r\n * Authored by Joshua Kifer <joshua.kifer gmail.com>\r\n * @flow\r\n */\r\n\r\n\r\nimport MediaFileReader from './MediaFileReader';\r\n\r\nimport type {\r\n  CallbackType,\r\n  LoadCallbackType,\r\n  CharsetType,\r\n  ByteRange,\r\n  TagType,\r\n  TagFrame\r\n} from './FlowTypes';\r\nimport MediaTagReader from './MediaTagReader';\r\n\r\nclass MP4TagReader extends MediaTagReader {\r\n  static getTagIdentifierByteRange(): ByteRange {\r\n    // The tag identifier is located in [4, 8] but since we'll need to reader\r\n    // the header of the first block anyway, we load it instead to avoid\r\n    // making two requests.\r\n    return {\r\n      offset: 0,\r\n      length: 16\r\n    };\r\n  }\r\n\r\n  static canReadTagFormat(tagIdentifier: Array<number>): boolean {\r\n    var id = String.fromCharCode.apply(String, tagIdentifier.slice(4, 8));\r\n    return id === \"ftyp\";\r\n  }\r\n\r\n  _loadData(mediaFileReader: MediaFileReader, callbacks: LoadCallbackType) {\r\n    // MP4 metadata isn't located in a specific location of the file. Roughly\r\n    // speaking, it's composed of blocks chained together like a linked list.\r\n    // These blocks are called atoms (or boxes).\r\n    // Each atom of the list can have its own child linked list. Atoms in this\r\n    // situation do not possess any data and are called \"container\" as they only\r\n    // contain other atoms.\r\n    // Other atoms represent a particular set of data, like audio, video or\r\n    // metadata. In order to find and load all the interesting atoms we need\r\n    // to traverse the entire linked list of atoms and only load the ones\r\n    // associated with metadata.\r\n    // The metadata atoms can be find under the \"moov.udta.meta.ilst\" hierarchy.\r\n\r\n    var self = this;\r\n    // Load the header of the first atom\r\n    mediaFileReader.loadRange([0, 16], {\r\n      onSuccess: function() {\r\n        self._loadAtom(mediaFileReader, 0, \"\", callbacks);\r\n      },\r\n      onError: callbacks.onError\r\n    });\r\n  }\r\n\r\n  _loadAtom(\r\n    mediaFileReader: MediaFileReader,\r\n    offset: number,\r\n    parentAtomFullName: string,\r\n    callbacks: LoadCallbackType\r\n  ) {\r\n    if (offset >= mediaFileReader.getSize()) {\r\n      callbacks.onSuccess();\r\n      return;\r\n    }\r\n\r\n    var self = this;\r\n    // 8 is the size of the atomSize and atomName fields.\r\n    // When reading the current block we always read 8 more bytes in order\r\n    // to also read the header of the next block.\r\n    var atomSize = mediaFileReader.getLongAt(offset, true);\r\n    if (atomSize == 0 || isNaN(atomSize)) {\r\n      callbacks.onSuccess();\r\n      return;\r\n    }\r\n    var atomName = mediaFileReader.getStringAt(offset + 4, 4);\r\n    // console.log(parentAtomFullName, atomName, atomSize);\r\n    // Container atoms (no actual data)\r\n    if (this._isContainerAtom(atomName)) {\r\n      if (atomName == \"meta\") {\r\n        // The \"meta\" atom breaks convention and is a container with data.\r\n        offset += 4; // next_item_id (uint32)\r\n      }\r\n      var atomFullName = (parentAtomFullName ? parentAtomFullName+\".\" : \"\") + atomName;\r\n      if (atomFullName === \"moov.udta.meta.ilst\") {\r\n        mediaFileReader.loadRange([offset, offset + atomSize], callbacks);\r\n      } else {\r\n        mediaFileReader.loadRange([offset+8, offset+8 + 8], {\r\n          onSuccess: function() {\r\n            self._loadAtom(mediaFileReader, offset + 8, atomFullName, callbacks);\r\n          },\r\n          onError: callbacks.onError\r\n        });\r\n      }\r\n    } else {\r\n      mediaFileReader.loadRange([offset+atomSize, offset+atomSize + 8], {\r\n        onSuccess: function() {\r\n          self._loadAtom(mediaFileReader, offset+atomSize, parentAtomFullName, callbacks);\r\n        },\r\n        onError: callbacks.onError\r\n      });\r\n    }\r\n  }\r\n\r\n  _isContainerAtom(atomName: string): boolean {\r\n    return [\"moov\", \"udta\", \"meta\", \"ilst\"].indexOf(atomName) >= 0;\r\n  }\r\n\r\n  _canReadAtom(atomName: string): boolean {\r\n    //return atomName !== \"----\";\r\n    return true\r\n  }\r\n\r\n  _parseData(data: MediaFileReader, tagsToRead: Array<string>): TagType {\r\n    var tags = {};\r\n\r\n    tagsToRead = this._expandShortcutTags(tagsToRead);\r\n    this._readAtom(tags, data, 0, data.getSize(), tagsToRead);\r\n\r\n    // create shortcuts for most common data.\r\n    for (var name in SHORTCUTS) if (SHORTCUTS.hasOwnProperty(name)) {\r\n      var tag = tags[SHORTCUTS[name]];\r\n      if (tag) {\r\n        if (name === \"track\") {\r\n          tags[name] = tag.data.track;\r\n        } else {\r\n          tags[name] = tag.data;\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      \"type\": \"MP4\",\r\n      \"ftyp\": data.getStringAt(8, 4),\r\n      \"version\": data.getLongAt(12, true),\r\n      \"tags\": tags\r\n    };\r\n  }\r\n\r\n  _readAtom(\r\n    tags: Object,\r\n    data: MediaFileReader,\r\n    offset: number,\r\n    length: number,\r\n    tagsToRead:Array<string>,\r\n    parentAtomFullName?: string,\r\n    indent?: string\r\n  ) {\r\n    indent = indent === undefined ? \"\" : indent + \"  \";\r\n\r\n    var seek = offset;\r\n    while (seek < offset + length) {\r\n      var atomSize = data.getLongAt(seek, true);\r\n      if (atomSize == 0) {\r\n        return;\r\n      }\r\n      var atomName = data.getStringAt(seek + 4, 4);\r\n\r\n      // console.log(seek, parentAtomFullName, atomName, atomSize);\r\n      if (this._isContainerAtom(atomName)) {\r\n        if (atomName == \"meta\") {\r\n          seek += 4; // next_item_id (uint32)\r\n        }\r\n        var atomFullName = (parentAtomFullName ? parentAtomFullName+\".\" : \"\") + atomName;\r\n        this._readAtom(tags, data, seek + 8, atomSize - 8, tagsToRead, atomFullName, indent);\r\n        return;\r\n      }\r\n\r\n      // Value atoms\r\n      if (\r\n        (!tagsToRead || tagsToRead.indexOf(atomName) >= 0) &&\r\n        parentAtomFullName === \"moov.udta.meta.ilst\" &&\r\n        this._canReadAtom(atomName)\r\n      ) {\r\n        if(atomName === '----')\r\n          {\r\n            let atomData = this._readMeanMetadataAtom(data, seek);\r\n            tags[atomData.id] = atomData;\r\n          }\r\n          else\r\n          {\r\n            tags[atomName] = this._readMetadataAtom(data, seek);\r\n          }\r\n        \r\n      }\r\n\r\n      seek += atomSize;\r\n    }\r\n  }\r\n\r\n  _readMetadataAtom(data: MediaFileReader, offset: number): TagFrame {\r\n    // 16: size + name + size + \"data\" (4 bytes each)\r\n    // 8: 1 byte atom version & 3 bytes atom flags + 4 bytes NULL space\r\n    // 8: 4 bytes track + 4 bytes total\r\n    const METADATA_HEADER = 16;\r\n\r\n    var atomSize = data.getLongAt(offset, true);\r\n    var atomName = data.getStringAt(offset + 4, 4);\r\n\r\n    var klass = data.getInteger24At(offset + METADATA_HEADER + 1, true);\r\n    var type = TYPES[klass];\r\n    var atomData;\r\n    var bigEndian = true;\r\n    if (atomName == \"trkn\") {\r\n      atomData = {\r\n        \"track\": data.getShortAt(offset + METADATA_HEADER + 10, bigEndian),\r\n        \"total\": data.getShortAt(offset + METADATA_HEADER + 14, bigEndian)\r\n      };\r\n    } else if (atomName == \"disk\") {\r\n      atomData = {\r\n        \"disk\": data.getShortAt(offset + METADATA_HEADER + 10, bigEndian),\r\n        \"total\": data.getShortAt(offset + METADATA_HEADER + 14, bigEndian)\r\n      };\r\n    } else {\r\n      // 4: atom version (1 byte) + atom flags (3 bytes)\r\n      // 4: NULL (usually locale indicator)\r\n      var atomHeader = METADATA_HEADER + 4 + 4;\r\n      var dataStart = offset + atomHeader;\r\n      var dataLength = atomSize - atomHeader;\r\n      var atomData;\r\n\r\n      // Workaround for covers being parsed as 'uint8' type despite being an 'covr' atom\r\n      if (atomName === 'covr' && type === 'uint8') {\r\n        type = 'jpeg'\r\n      }\r\n\r\n      switch (type) {\r\n        case \"text\":\r\n        atomData = data.getStringWithCharsetAt(dataStart, dataLength, \"utf-8\").toString();\r\n        break;\r\n\r\n        case \"uint8\":\r\n        atomData = data.getShortAt(dataStart, false);\r\n        break;\r\n        \r\n        case \"int\":\r\n        case \"uint\":\r\n        // Though the QuickTime spec doesn't state it, there are 64-bit values\r\n        // such as plID (Playlist/Collection ID). With its single 64-bit floating\r\n        // point number type, these are hard to parse and pass in JavaScript.\r\n        // The high word of plID seems to always be zero, so, as this is the\r\n        // only current 64-bit atom handled, it is parsed from its 32-bit\r\n        // low word as an unsigned long.\r\n        //\r\n        var intReader = type == 'int'\r\n                          ? ( dataLength == 1 ? data.getSByteAt :\r\n                              dataLength == 2 ? data.getSShortAt :\r\n                              dataLength == 4 ? data.getSLongAt :\r\n                                                data.getLongAt)\r\n                          : ( dataLength == 1 ? data.getByteAt :\r\n                              dataLength == 2 ? data.getShortAt :\r\n                                                data.getLongAt);\r\n        // $FlowFixMe - getByteAt doesn't receive a second argument\r\n        atomData = intReader.call(data, dataStart + (dataLength == 8 ? 4 : 0), true);\r\n        break;\r\n\r\n        case \"jpeg\":\r\n        case \"png\":\r\n        atomData = {\r\n          \"format\": \"image/\" + type,\r\n          \"data\": data.getBytesAt(dataStart, dataLength)\r\n        };\r\n        break;\r\n      }\r\n    }\r\n\r\n    return {\r\n      id: atomName,\r\n      size: atomSize,\r\n      description: ATOM_DESCRIPTIONS[atomName] || \"Unknown\",\r\n      data: atomData\r\n    };\r\n  }\r\n\r\n  _readMeanMetadataAtom(data: MediaFileReader, offset: number): TagFrame {\r\n    // 16: size + name + size + \"data\" (4 bytes each)\r\n    // 8: 1 byte atom version & 3 bytes atom flags + 4 bytes NULL space\r\n    // 8: 4 bytes track + 4 bytes total\r\n    var METADATA_HEADER = 16;\r\n    var atomSize = data.getLongAt(offset, true);\r\n    var atomName = data.getStringAt(offset + 4, 4);\r\n    let description = '';\r\n    var klass = data.getInteger24At(offset + METADATA_HEADER + 1, true);\r\n    var type = TYPES[klass];\r\n    var atomData;\r\n    var bigEndian = true;\r\n\r\n    if(atomName == \"----\")\r\n    {\r\n      let parentAtomName = atomName;\r\n      let atomOffset = offset + 8;\r\n      atomSize = data.getLongAt(atomOffset, true);\r\n      atomName = data.getStringAt(atomOffset + 4, 4);\r\n      parentAtomName += '/' + atomName;\r\n\r\n      if(atomName === \"mean\")\r\n      {\r\n        atomOffset += 8;\r\n        atomName = data.getStringAt(atomOffset + 4, atomSize - 12); // com.apple.iTunes | com.serato.dj\r\n        //console.log('atomSize', atomSize);\r\n        //console.log('atomName', atomName);\r\n        parentAtomName += '/' + atomName;\r\n\r\n        atomOffset = offset + atomSize + 8;\r\n        atomSize = data.getLongAt(atomOffset, true);\r\n        atomName = data.getStringAt(atomOffset + 4, 4); // 'name'\r\n        //console.log('atomSize', atomSize);\r\n        //console.log('atomName', atomName);\r\n\r\n        if(atomName === \"name\")\r\n        {\r\n          //atomOffset += 8;\r\n          atomName = data.getStringAt(atomOffset + 12, atomSize - 12); // 'markersv2'\r\n          parentAtomName += '/' + atomName;\r\n          description = atomName;\r\n          //console.log('atomSize', atomSize);\r\n          //console.log('atomName', atomName);\r\n\r\n          atomOffset += atomSize;\r\n          atomSize = data.getLongAt(atomOffset, true);\r\n          atomName = data.getStringAt(atomOffset + 4, 4); // 'data'\r\n          //console.log('atomSize', atomSize);\r\n          //console.log('atomName', atomName);\r\n          \r\n          var dataStart = atomOffset + METADATA_HEADER;\r\n          var dataLength = atomSize - METADATA_HEADER;\r\n          //console.log('atomOffset', atomOffset, 'atomSize', atomSize, 'dataStart', dataStart, 'dataLength', dataLength);\r\n          atomData = data.getStringWithCharsetAt(dataStart, dataLength, \"utf-8\").toString();\r\n          return {\r\n            id: parentAtomName,\r\n            size: atomSize,\r\n            description: description,\r\n            data: atomData\r\n          };\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  getShortcuts(): {[key: string]: string|Array<string>} {\r\n    return SHORTCUTS;\r\n  }\r\n}\r\n\r\n/*\r\n * https://developer.apple.com/library/content/documentation/QuickTime/QTFF/Metadata/Metadata.html#//apple_ref/doc/uid/TP40000939-CH1-SW35\r\n*/\r\nconst TYPES = {\r\n  \"0\": \"uint8\",\r\n  \"1\": \"text\",\r\n  \"13\": \"jpeg\",\r\n  \"14\": \"png\",\r\n  \"21\": \"int\",\r\n  \"22\": \"uint\"\r\n};\r\n\r\nconst ATOM_DESCRIPTIONS = {\r\n  \"©alb\": \"Album\",\r\n  \"©ART\": \"Artist\",\r\n  \"aART\": \"Album Artist\",\r\n  \"©day\": \"Release Date\",\r\n  \"©nam\": \"Title\",\r\n  \"©gen\": \"Genre\",\r\n  \"gnre\": \"Genre\",\r\n  \"trkn\": \"Track Number\",\r\n  \"©wrt\": \"Composer\",\r\n  \"©too\": \"Encoding Tool\",\r\n  \"©enc\": \"Encoded By\",\r\n  \"cprt\": \"Copyright\",\r\n  \"covr\": \"Cover Art\",\r\n  \"©grp\": \"Grouping\",\r\n  \"keyw\": \"Keywords\",\r\n  \"©lyr\": \"Lyrics\",\r\n  \"©cmt\": \"Comment\",\r\n  \"tmpo\": \"Tempo\",\r\n  \"cpil\": \"Compilation\",\r\n  \"disk\": \"Disc Number\",\r\n  \"tvsh\": \"TV Show Name\",\r\n  \"tven\": \"TV Episode ID\",\r\n  \"tvsn\": \"TV Season\",\r\n  \"tves\": \"TV Episode\",\r\n  \"tvnn\": \"TV Network\",\r\n  \"desc\": \"Description\",\r\n  \"ldes\": \"Long Description\",\r\n  \"sonm\": \"Sort Name\",\r\n  \"soar\": \"Sort Artist\",\r\n  \"soaa\": \"Sort Album\",\r\n  \"soco\": \"Sort Composer\",\r\n  \"sosn\": \"Sort Show\",\r\n  \"purd\": \"Purchase Date\",\r\n  \"pcst\": \"Podcast\",\r\n  \"purl\": \"Podcast URL\",\r\n  \"catg\": \"Category\",\r\n  \"hdvd\": \"HD Video\",\r\n  \"stik\": \"Media Type\",\r\n  \"rtng\": \"Content Rating\",\r\n  \"pgap\": \"Gapless Playback\",\r\n  \"apID\": \"Purchase Account\",\r\n  \"sfID\": \"Country Code\",\r\n  \"atID\": \"Artist ID\",\r\n  \"cnID\": \"Catalog ID\",\r\n  \"plID\": \"Collection ID\",\r\n  \"geID\": \"Genre ID\",\r\n  \"xid \": \"Vendor Information\",\r\n  \"flvr\": \"Codec Flavor\"\r\n};\r\n\r\nconst UNSUPPORTED_ATOMS = {\r\n  \"----\": 1,\r\n};\r\n\r\nconst SHORTCUTS = {\r\n  \"title\"     : \"©nam\",\r\n  \"artist\"    : \"©ART\",\r\n  \"album\"     : \"©alb\",\r\n  \"year\"      : \"©day\",\r\n  \"comment\"   : \"©cmt\",\r\n  \"track\"     : \"trkn\",\r\n  \"genre\"     : \"©gen\",\r\n  \"picture\"   : \"covr\",\r\n  \"lyrics\"    : \"©lyr\"\r\n};\r\n\r\nexport default MP4TagReader;\r\n","import MediaFileReader from './MediaFileReader';\r\n\r\n/* The first 4 bytes of a FLAC file describes the header for the file. If these\r\n * bytes respectively read \"fLaC\", we can determine it is a FLAC file.\r\n */\r\nconst FLAC_HEADER_SIZE = 4;\r\n\r\n/* FLAC metadata is stored in blocks containing data ranging from STREAMINFO to\r\n * VORBIS_COMMENT, which is what we want to work with.\r\n *\r\n * Each metadata header is 4 bytes long, with the first byte determining whether\r\n * it is the last metadata block before the audio data and what the block type is.\r\n * This first byte can further be split into 8 bits, with the first bit being the\r\n * last-metadata-block flag, and the last three bits being the block type.\r\n *\r\n * Since the specification states that the decimal value for a VORBIS_COMMENT block\r\n * type is 4, the two possibilities for the comment block header values are:\r\n * - 00000100 (Not a last metadata comment block, value of 4)\r\n * - 10000100 (A last metadata comment block, value of 132)\r\n *\r\n * Similarly, the picture block header values are 6 and 128.\r\n *\r\n * All values for METADATA_BLOCK_HEADER can be found here.\r\n * https://xiph.org/flac/format.html#metadata_block_header\r\n */\r\nconst COMMENT_HEADERS = [4, 132];\r\nconst PICTURE_HEADERS = [6, 134];\r\n\r\n// These are the possible image types as defined by the FLAC specification.\r\nconst IMAGE_TYPES = [\r\n  \"Other\",\r\n  \"32x32 pixels 'file icon' (PNG only)\",\r\n  \"Other file icon\",\r\n  \"Cover (front)\",\r\n  \"Cover (back)\",\r\n  \"Leaflet page\",\r\n  \"Media (e.g. label side of CD)\",\r\n  \"Lead artist/lead performer/soloist\",\r\n  \"Artist/performer\",\r\n  \"Conductor\",\r\n  \"Band/Orchestra\",\r\n  \"Composer\",\r\n  \"Lyricist/text writer\",\r\n  \"Recording Location\",\r\n  \"During recording\",\r\n  \"During performance\",\r\n  \"Movie/video screen capture\",\r\n  \"A bright coloured fish\",\r\n  \"Illustration\",\r\n  \"Band/artist logotype\",\r\n  \"Publisher/Studio logotype\"\r\n];\r\n\r\nimport type {\r\n  LoadCallbackType,\r\n  ByteRange,\r\n  TagType\r\n} from './FlowTypes';\r\nimport MediaTagReader from './MediaTagReader';\r\n\r\n/**\r\n * Class representing a MediaTagReader that parses FLAC tags.\r\n */\r\nclass FLACTagReader extends MediaTagReader {\r\n  _commentOffset: number;\r\n  _pictureOffset: number;\r\n\r\n  /**\r\n   * Gets the byte range for the tag identifier.\r\n   *\r\n   * Because the Vorbis comment block is not guaranteed to be in a specified\r\n   * location, we can only load the first 4 bytes of the file to confirm it\r\n   * is a FLAC first.\r\n   *\r\n   * @return {ByteRange} The byte range that identifies the tag for a FLAC.\r\n   */\r\n  static getTagIdentifierByteRange(): ByteRange {\r\n    return {\r\n      offset: 0,\r\n      length: FLAC_HEADER_SIZE\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Determines whether or not this reader can read a certain tag format.\r\n   *\r\n   * This checks that the first 4 characters in the file are fLaC, which\r\n   * according to the FLAC file specification should be the characters that\r\n   * indicate a FLAC file.\r\n   *\r\n   * @return {boolean} True if the header is fLaC, false otherwise.\r\n   */\r\n  static canReadTagFormat(tagIdentifier: Array<number>): boolean {\r\n    var id = String.fromCharCode.apply(String, tagIdentifier.slice(0, 4));\r\n    return id === 'fLaC';\r\n  }\r\n\r\n  /**\r\n   * Function called to load the data from the file.\r\n   *\r\n   * To begin processing the blocks, the next 4 bytes after the initial 4 bytes\r\n   * (bytes 4 through 7) are loaded. From there, the rest of the loading process\r\n   * is passed on to the _loadBlock function, which will handle the rest of the\r\n   * parsing for the metadata blocks.\r\n   *\r\n   * @param {MediaFileReader} mediaFileReader - The MediaFileReader used to parse the file.\r\n   * @param {LoadCallbackType} callbacks - The callback to call once _loadData is completed.\r\n   */\r\n  _loadData(mediaFileReader: MediaFileReader, callbacks: LoadCallbackType) {\r\n    var self = this;\r\n    mediaFileReader.loadRange([4, 7], {\r\n      onSuccess: function() {\r\n        self._loadBlock(mediaFileReader, 4, callbacks);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Special internal function used to parse the different FLAC blocks.\r\n   *\r\n   * The FLAC specification doesn't specify a specific location for metadata to resign, but\r\n   * dictates that it may be in one of various blocks located throughout the file. To load the\r\n   * metadata, we must locate the header first. This can be done by reading the first byte of\r\n   * each block to determine the block type. After the block type comes a 24 bit integer that stores\r\n   * the length of the block as big endian. Using this, we locate the block and store the offset for\r\n   * parsing later.\r\n   *\r\n   * After each block has been parsed, the _nextBlock function is called in order\r\n   * to parse the information of the next block. All blocks need to be parsed in order to find\r\n   * all of the picture and comment blocks.\r\n   *\r\n   * More info on the FLAC specification may be found here:\r\n   * https://xiph.org/flac/format.html\r\n   * @param {MediaFileReader} mediaFileReader - The MediaFileReader used to parse the file.\r\n   * @param {number} offset - The offset to start checking the header from.\r\n   * @param {LoadCallbackType} callbacks - The callback to call once the header has been found.\r\n   */\r\n  _loadBlock(\r\n    mediaFileReader: MediaFileReader,\r\n    offset: number,\r\n    callbacks: LoadCallbackType\r\n  ) {\r\n    var self = this;\r\n    /* As mentioned above, this first byte is loaded to see what metadata type\r\n     * this block represents.\r\n     */\r\n    var blockHeader = mediaFileReader.getByteAt(offset);\r\n    /* The last three bytes (integer 24) contain a value representing the length\r\n     * of the following metadata block. The 1 is added in order to shift the offset\r\n     * by one to get the last three bytes in the block header.\r\n     */\r\n    var blockSize = mediaFileReader.getInteger24At(offset + 1, true);\r\n    /* This conditional checks if blockHeader (the byte retrieved representing the\r\n     * type of the header) is one the headers we are looking for.\r\n     *\r\n     * If that is not true, the block is skipped over and the next range is loaded:\r\n     * - offset + 4 + blockSize adds 4 to skip over the initial metadata header and\r\n     * blockSize to skip over the block overall, placing it at the head of the next\r\n     * metadata header.\r\n     * - offset + 4 + 4 + blockSize does the same thing as the previous block with\r\n     * the exception of adding another 4 bytes to move it to the end of the new metadata\r\n     * header.\r\n     */\r\n    if (COMMENT_HEADERS.indexOf(blockHeader) !== -1) {\r\n      /* 4 is added to offset to move it to the head of the actual metadata.\r\n       * The range starting from offsetMatadata (the beginning of the block)\r\n       * and offsetMetadata + blockSize (the end of the block) is loaded.\r\n       */\r\n      var offsetMetadata = offset + 4;\r\n      mediaFileReader.loadRange([offsetMetadata, offsetMetadata + blockSize], {\r\n        onSuccess: function() {\r\n          self._commentOffset = offsetMetadata;\r\n          self._nextBlock(mediaFileReader, offset, blockHeader, blockSize, callbacks);\r\n        }\r\n      });\r\n    } else if (PICTURE_HEADERS.indexOf(blockHeader) !== -1) {\r\n      var offsetMetadata = offset + 4;\r\n      mediaFileReader.loadRange([offsetMetadata, offsetMetadata + blockSize], {\r\n        onSuccess: function() {\r\n          self._pictureOffset = offsetMetadata;\r\n          self._nextBlock(mediaFileReader, offset, blockHeader, blockSize, callbacks);\r\n        }\r\n      });\r\n    } else {\r\n      self._nextBlock(mediaFileReader, offset, blockHeader, blockSize, callbacks);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Internal function used to load the next range and respective block.\r\n   *\r\n   * If the metadata block that was identified is not the last block before the\r\n   * audio blocks, the function will continue loading the next blocks. If it is\r\n   * the last block (identified by any values greater than 127, see FLAC spec.),\r\n   * the function will determine whether a comment block had been identified.\r\n   *\r\n   * If the block does not exist, the error callback is called. Otherwise, the function\r\n   * will call the success callback, allowing data parsing to begin.\r\n   * @param {MediaFileReader} mediaFileReader - The MediaFileReader used to parse the file.\r\n   * @param {number} offset - The offset that the existing header was located at.\r\n   * @param {number} blockHeader - An integer reflecting the header type of the block.\r\n   * @param {number} blockSize - The size of the previously processed header.\r\n   * @param {LoadCallbackType} callbacks - The callback functions to be called.\r\n   */\r\n  _nextBlock(\r\n    mediaFileReader: MediaFileReader,\r\n    offset: number,\r\n    blockHeader: number,\r\n    blockSize: number,\r\n    callbacks: LoadCallbackType\r\n  ) {\r\n    var self = this;\r\n    if (blockHeader > 127) {\r\n      if (!self._commentOffset) {\r\n        callbacks.onError({\r\n          \"type\": \"loadData\",\r\n          \"info\": \"Comment block could not be found.\"\r\n        });\r\n      } else {\r\n        callbacks.onSuccess();\r\n      }\r\n    } else {\r\n      mediaFileReader.loadRange([offset + 4 + blockSize, offset + 4 + 4 + blockSize], {\r\n        onSuccess: function() {\r\n          self._loadBlock(mediaFileReader, offset + 4 + blockSize, callbacks);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses the data and returns the tags.\r\n   *\r\n   * This is an overview of the VorbisComment format and what this function attempts to\r\n   * retrieve:\r\n   * - First 4 bytes: a long that contains the length of the vendor string.\r\n   * - Next n bytes: the vendor string encoded in UTF-8.\r\n   * - Next 4 bytes: a long representing how many comments are in this block\r\n   * For each comment that exists:\r\n   * - First 4 bytes: a long representing the length of the comment\r\n   * - Next n bytes: the comment encoded in UTF-8.\r\n   * The comment string will usually appear in a format similar to:\r\n   * ARTIST=me\r\n   *\r\n   * Note that the longs and integers in this block are encoded in little endian\r\n   * as opposed to big endian for the rest of the FLAC spec.\r\n   * @param {MediaFileReader} data - The MediaFileReader to parse the file with.\r\n   * @param {Array<string>} [tags] - Optional tags to also be retrieved from the file.\r\n   * @return {TagType} - An object containing the tag information for the file.\r\n   */\r\n  _parseData(data: MediaFileReader, tags:Array<string>): TagType {\r\n    var vendorLength = data.getLongAt(this._commentOffset, false);\r\n    var offsetVendor = this._commentOffset + 4;\r\n    /* This line is able to retrieve the vendor string that the VorbisComment block\r\n     * contains. However, it is not part of the tags that JSMediaTags normally retrieves,\r\n     * and is therefore commented out.\r\n     */\r\n    // var vendor = data.getStringWithCharsetAt(offsetVendor, vendorLength, \"utf-8\").toString();\r\n    var offsetList = vendorLength + offsetVendor;\r\n    /* To get the metadata from the block, we first get the long that contains the\r\n     * number of actual comment values that are existent within the block.\r\n     *\r\n     * As we loop through all of the comment blocks, we get the data length in order to\r\n     * get the right size string, and then determine which category that string falls under.\r\n     * The dataOffset variable is constantly updated so that it is at the beginning of the\r\n     * comment that is currently being parsed.\r\n     *\r\n     * Additions of 4 here are used to move the offset past the first 4 bytes which only contain\r\n     * the length of the comment.\r\n     */\r\n    var numComments = data.getLongAt(offsetList, false);\r\n    var dataOffset = offsetList + 4;\r\n    var title, artist, album, track, genre, picture;\r\n    for (let i = 0; i < numComments; i++) {\r\n      let dataLength = data.getLongAt(dataOffset, false);\r\n      let s = data.getStringWithCharsetAt(dataOffset + 4, dataLength, \"utf-8\").toString();\r\n      let d = s.indexOf(\"=\");\r\n      let split = [s.slice(0, d), s.slice(d + 1)];\r\n      switch (split[0].toUpperCase()) {\r\n        case \"TITLE\":\r\n          title = split[1];\r\n          break;\r\n        case \"ARTIST\":\r\n          artist = split[1];\r\n          break;\r\n        case \"ALBUM\":\r\n          album = split[1];\r\n          break;\r\n        case \"TRACKNUMBER\":\r\n          track = split[1];\r\n          break;\r\n        case \"GENRE\":\r\n          genre = split[1];\r\n          break;\r\n      }\r\n      dataOffset += 4 + dataLength;\r\n    }\r\n\r\n    /* If a picture offset was found and assigned, then the reader will start processing\r\n     * the picture block from that point.\r\n     *\r\n     * All the lengths for the picture data can be found online here:\r\n     * https://xiph.org/flac/format.html#metadata_block_picture\r\n     */\r\n    if (this._pictureOffset) {\r\n      var imageType = data.getLongAt(this._pictureOffset, true);\r\n      var offsetMimeLength = this._pictureOffset + 4;\r\n      var mimeLength = data.getLongAt(offsetMimeLength, true);\r\n      var offsetMime = offsetMimeLength + 4;\r\n      var mime = data.getStringAt(offsetMime, mimeLength);\r\n      var offsetDescriptionLength = offsetMime + mimeLength;\r\n      var descriptionLength = data.getLongAt(offsetDescriptionLength, true);\r\n      var offsetDescription = offsetDescriptionLength + 4;\r\n      var description = data.getStringWithCharsetAt(offsetDescription, descriptionLength, \"utf-8\").toString();\r\n      var offsetDataLength = offsetDescription + descriptionLength + 16;\r\n      var dataLength = data.getLongAt(offsetDataLength, true);\r\n      var offsetData = offsetDataLength + 4;\r\n      var imageData = data.getBytesAt(offsetData, dataLength, true);\r\n      picture = {\r\n        format: mime,\r\n        type: IMAGE_TYPES[imageType],\r\n        description: description,\r\n        data: imageData\r\n      }\r\n    }\r\n    \r\n    var tag = {\r\n      type: \"FLAC\",\r\n      version: \"1\",\r\n      tags: {\r\n        \"title\": title,\r\n        \"artist\": artist,\r\n        \"album\": album,\r\n        \"track\": track,\r\n        \"genre\": genre,\r\n        \"picture\": picture\r\n      }\r\n    }\r\n    return tag;\r\n  }\r\n}\r\n\r\nexport default FLACTagReader;\r\n","const fs = require('fs');\r\n\r\nimport ChunkedFileData from \"./ChunkedFileData\";\r\nimport MediaFileReader from \"./MediaFileReader\";\r\n\r\nimport type { LoadCallbackType } from \"./FlowTypes\";\r\n\r\nclass NodeFileReader extends MediaFileReader {\r\n  _path: string;\r\n  _fileData: ChunkedFileData;\r\n\r\n  constructor(path: string) {\r\n    super();\r\n    this._path = path;\r\n    this._fileData = new ChunkedFileData();\r\n    this._isInitialized = true;\r\n  }\r\n\r\n  static canReadFile(file: any): boolean {\r\n    return (\r\n        typeof file === 'string' &&\r\n        !/^[a-z]+:\\/\\//i.test(file)\r\n      );\r\n  }\r\n\r\n  init(callbacks: LoadCallbackType) {\r\n    var self = this;\r\n\r\n    fs.stat(self._path, function(err : Error, stats : any) {\r\n      if (err) {\r\n        if (callbacks.onError) {\r\n          callbacks.onError({\"type\": \"fs\", \"info\": err});\r\n        }\r\n      } else {\r\n        self._size = stats.size;\r\n        callbacks.onSuccess();\r\n      }\r\n    });\r\n  }\r\n\r\n  loadRange(range: [number, number], callbacks: LoadCallbackType) {\r\n    var fd = -1;\r\n    var self = this;\r\n    var fileData = this._fileData;\r\n\r\n    var length = range[1] - range[0] + 1;\r\n    var onSuccess = callbacks.onSuccess;\r\n    var onError = callbacks.onError || function(object){};\r\n\r\n    if (fileData.hasDataRange(range[0], range[1])) {\r\n      process.nextTick(onSuccess);\r\n      return;\r\n    }\r\n\r\n    var readData = function(err : Error, _fd : number) {\r\n      if (err) {\r\n        onError({\"type\": \"fs\", \"info\": err});\r\n        return;\r\n      }\r\n\r\n      fd = _fd;\r\n      // TODO: Should create a pool of Buffer objects across all instances of\r\n      //       NodeFileReader. This is fine for now.\r\n      var buffer = Buffer.alloc(length);\r\n      fs.read(_fd, buffer, 0, length, range[0], processData);\r\n    };\r\n\r\n    var processData = function(err: Error, bytesRead : any, buffer: Buffer) {\r\n      fs.close(fd, function(err: Error) {\r\n        if (err) {\r\n          console.error(err);\r\n        }\r\n      });\r\n\r\n      if (err) {\r\n        onError({\"type\": \"fs\", \"info\": err});\r\n        return;\r\n      }\r\n\r\n      storeBuffer(buffer);\r\n      onSuccess();\r\n    };\r\n\r\n    var storeBuffer = function(buffer: Buffer) {\r\n      var data = Array.prototype.slice.call(buffer, 0, length);\r\n      fileData.addData(range[0], data);\r\n    }\r\n\r\n    fs.open(this._path, \"r\", undefined, readData);\r\n  }\r\n\r\n  getByteAt(offset: number): number {\r\n    return this._fileData.getByteAt(offset);\r\n  }\r\n}\r\n\r\nexport default NodeFileReader;\r\n","import MediaFileReader from \"./MediaFileReader\";\r\nimport XhrFileReader from \"./XhrFileReader\";\r\nimport BlobFileReader from \"./BlobFileReader\";\r\nimport ArrayFileReader from \"./ArrayFileReader\";\r\nimport MediaTagReader from \"./MediaTagReader\";\r\nimport ID3v1TagReader from \"./ID3v1TagReader\";\r\nimport ID3v2TagReader from \"./ID3v2TagReader\";\r\nimport MP4TagReader from \"./MP4TagReader\";\r\nimport FLACTagReader from \"./FLACTagReader\";\r\nimport NodeFileReader from './NodeFileReader';\r\n\r\nimport type { CallbackType, LoadCallbackType, ByteRange } from \"./FlowTypes\";\r\n\r\nvar mediaFileReaders: Array<MediaFileReader> = [];\r\nvar mediaTagReaders: Array<MediaTagReader> = [];\r\n\r\nexport function read(location: Object, callbacks: CallbackType) {\r\n  new Reader(location).read(callbacks);\r\n}\r\n\r\nfunction isRangeValid(range: ByteRange, fileSize: number) {\r\n  const invalidPositiveRange =\r\n    range.offset >= 0 && range.offset + range.length >= fileSize;\r\n\r\n  const invalidNegativeRange =\r\n    range.offset < 0 &&\r\n    (-range.offset > fileSize || range.offset + range.length > 0);\r\n\r\n  return !(invalidPositiveRange || invalidNegativeRange);\r\n}\r\n\r\nexport class Reader {\r\n  _file: any;\r\n  _tagsToRead: Array<string>;\r\n  _fileReader: MediaFileReader;\r\n  _tagReader: MediaTagReader;\r\n\r\n  constructor(file: any) {\r\n    this._file = file;\r\n  }\r\n\r\n  setTagsToRead(tagsToRead: Array<string>): Reader {\r\n    this._tagsToRead = tagsToRead;\r\n    return this;\r\n  }\r\n\r\n  setFileReader(fileReader: MediaFileReader): Reader {\r\n    this._fileReader = fileReader;\r\n    return this;\r\n  }\r\n\r\n  setTagReader(tagReader: MediaTagReader): Reader {\r\n    this._tagReader = tagReader;\r\n    return this;\r\n  }\r\n\r\n  read(callbacks: CallbackType) {\r\n    var FileReader = this._getFileReader();\r\n    var fileReader = new FileReader(this._file);\r\n    var self = this;\r\n\r\n    fileReader.init({\r\n      onSuccess: function () {\r\n        self._getTagReader(fileReader, {\r\n          onSuccess: function (TagReader: MediaTagReader) {\r\n            new TagReader(fileReader)\r\n              .setTagsToRead(self._tagsToRead)\r\n              .read(callbacks);\r\n          },\r\n          onError: callbacks.onError,\r\n        });\r\n      },\r\n      onError: callbacks.onError,\r\n    });\r\n  }\r\n\r\n  _getFileReader(): MediaFileReader {\r\n    if (this._fileReader) {\r\n      return this._fileReader;\r\n    } else {\r\n      return this._findFileReader();\r\n    }\r\n  }\r\n\r\n  _findFileReader(): MediaFileReader {\r\n    for (var i = 0; i < mediaFileReaders.length; i++) {\r\n      if (mediaFileReaders[i].canReadFile(this._file)) {\r\n        return mediaFileReaders[i];\r\n      }\r\n    }\r\n\r\n    throw new Error(\"No suitable file reader found for \" + this._file);\r\n  }\r\n\r\n  _getTagReader(fileReader: MediaFileReader, callbacks: CallbackType) {\r\n    if (this._tagReader) {\r\n      var tagReader = this._tagReader;\r\n      setTimeout(function () {\r\n        callbacks.onSuccess(tagReader);\r\n      }, 1);\r\n    } else {\r\n      this._findTagReader(fileReader, callbacks);\r\n    }\r\n  }\r\n\r\n  _findTagReader(fileReader: MediaFileReader, callbacks: CallbackType) {\r\n    // We don't want to make multiple fetches per tag reader to get the tag\r\n    // identifier. The strategy here is to combine all the tag identifier\r\n    // ranges into one and make a single fetch. This is particularly important\r\n    // in file readers that have expensive loads like the XHR one.\r\n    // However, with this strategy we run into the problem of loading the\r\n    // entire file because tag identifiers might be at the start or end of\r\n    // the file.\r\n    // To get around this we divide the tag readers into two categories, the\r\n    // ones that read their tag identifiers from the start of the file and the\r\n    // ones that read from the end of the file.\r\n    var tagReadersAtFileStart = [];\r\n    var tagReadersAtFileEnd = [];\r\n    var fileSize = fileReader.getSize();\r\n\r\n    for (var i = 0; i < mediaTagReaders.length; i++) {\r\n      var range = mediaTagReaders[i].getTagIdentifierByteRange();\r\n      if (!isRangeValid(range, fileSize)) {\r\n        continue;\r\n      }\r\n\r\n      if (\r\n        (range.offset >= 0 && range.offset < fileSize / 2) ||\r\n        (range.offset < 0 && range.offset < -fileSize / 2)\r\n      ) {\r\n        tagReadersAtFileStart.push(mediaTagReaders[i]);\r\n      } else {\r\n        tagReadersAtFileEnd.push(mediaTagReaders[i]);\r\n      }\r\n    }\r\n\r\n    var tagsLoaded = false;\r\n    var loadTagIdentifiersCallbacks = {\r\n      onSuccess: function () {\r\n        if (!tagsLoaded) {\r\n          // We're expecting to load two sets of tag identifiers. This flag\r\n          // indicates when the first one has been loaded.\r\n          tagsLoaded = true;\r\n          return;\r\n        }\r\n\r\n        for (var i = 0; i < mediaTagReaders.length; i++) {\r\n          var range = mediaTagReaders[i].getTagIdentifierByteRange();\r\n          if (!isRangeValid(range, fileSize)) {\r\n            continue;\r\n          }\r\n\r\n          try {\r\n            var tagIndentifier = fileReader.getBytesAt(\r\n              range.offset >= 0 ? range.offset : range.offset + fileSize,\r\n              range.length\r\n            );\r\n          } catch (ex) {\r\n            if (callbacks.onError) {\r\n              callbacks.onError({\r\n                type: \"fileReader\",\r\n                info: ex.message,\r\n              });\r\n            }\r\n            return;\r\n          }\r\n\r\n          if (mediaTagReaders[i].canReadTagFormat(tagIndentifier)) {\r\n            callbacks.onSuccess(mediaTagReaders[i]);\r\n            return;\r\n          }\r\n        }\r\n\r\n        if (callbacks.onError) {\r\n          callbacks.onError({\r\n            type: \"tagFormat\",\r\n            info: \"No suitable tag reader found\",\r\n          });\r\n        }\r\n      },\r\n      onError: callbacks.onError,\r\n    };\r\n\r\n    this._loadTagIdentifierRanges(\r\n      fileReader,\r\n      tagReadersAtFileStart,\r\n      loadTagIdentifiersCallbacks\r\n    );\r\n    this._loadTagIdentifierRanges(\r\n      fileReader,\r\n      tagReadersAtFileEnd,\r\n      loadTagIdentifiersCallbacks\r\n    );\r\n  }\r\n\r\n  _loadTagIdentifierRanges(\r\n    fileReader: MediaFileReader,\r\n    tagReaders: Array<MediaTagReader>,\r\n    callbacks: LoadCallbackType\r\n  ) {\r\n    if (tagReaders.length === 0) {\r\n      // Force async\r\n      setTimeout(callbacks.onSuccess, 1);\r\n      return;\r\n    }\r\n\r\n    var tagIdentifierRange = [Number.MAX_VALUE, 0];\r\n    var fileSize = fileReader.getSize();\r\n\r\n    // Create a super set of all ranges so we can load them all at once.\r\n    // Might need to rethink this approach if there are tag ranges too far\r\n    // a part from each other. We're good for now though.\r\n    for (var i = 0; i < tagReaders.length; i++) {\r\n      var range = tagReaders[i].getTagIdentifierByteRange();\r\n      var start = range.offset >= 0 ? range.offset : range.offset + fileSize;\r\n      var end = start + range.length - 1;\r\n\r\n      tagIdentifierRange[0] = Math.min(start, tagIdentifierRange[0]);\r\n      tagIdentifierRange[1] = Math.max(end, tagIdentifierRange[1]);\r\n    }\r\n\r\n    fileReader.loadRange(tagIdentifierRange, callbacks);\r\n  }\r\n}\r\n\r\nexport class Config {\r\n  static addFileReader(fileReader: MediaFileReader): Config {\r\n    mediaFileReaders.push(fileReader);\r\n    return Config;\r\n  }\r\n\r\n  static addTagReader(tagReader: MediaTagReader): Config {\r\n    mediaTagReaders.push(tagReader);\r\n    return Config;\r\n  }\r\n\r\n  static removeTagReader(tagReader: MediaTagReader): Config {\r\n    var tagReaderIx = mediaTagReaders.indexOf(tagReader);\r\n\r\n    if (tagReaderIx >= 0) {\r\n      mediaTagReaders.splice(tagReaderIx, 1);\r\n    }\r\n\r\n    return Config;\r\n  }\r\n\r\n  static EXPERIMENTAL_avoidHeadRequests() {\r\n    XhrFileReader.setConfig({\r\n      avoidHeadRequests: true,\r\n    });\r\n  }\r\n\r\n  static setDisallowedXhrHeaders(disallowedXhrHeaders: Array<string>) {\r\n    XhrFileReader.setConfig({\r\n      disallowedXhrHeaders: disallowedXhrHeaders,\r\n    });\r\n  }\r\n\r\n  static setXhrTimeoutInSec(timeoutInSec: number) {\r\n    XhrFileReader.setConfig({\r\n      timeoutInSec: timeoutInSec,\r\n    });\r\n  }\r\n}\r\n\r\nConfig.addFileReader(XhrFileReader)\r\n  .addFileReader(BlobFileReader)\r\n  .addFileReader(ArrayFileReader)\r\n  .addTagReader(ID3v2TagReader)\r\n  .addTagReader(ID3v1TagReader)\r\n  .addTagReader(MP4TagReader)\r\n  .addTagReader(FLACTagReader);\r\n\r\n  if (typeof process !== \"undefined\" && !process.browser) {\r\n    if (typeof navigator !== \"undefined\" && navigator.product === \"ReactNative\") {\r\n      throw new Error('ReactNative not supported');\r\n    } else {\r\n      Config.addFileReader(NodeFileReader);\r\n    }\r\n  }"],"names":["NOT_FOUND","ChunkedFileData","_fileData","_proto","prototype","addData","offset","data","offsetEnd","length","chunkRange","_getChunkRange","startIx","splice","insertIx","firstChunk","lastChunk","endIx","needsPrepend","needsAppend","chunk","Math","min","slicedData","_sliceData","_concatData","dataA","dataB","ArrayBuffer","isView","dataAandB","constructor","set","concat","begin","end","slice","subarray","offsetStart","startChunkIx","endChunkIx","i","chunkOffsetStart","chunkOffsetEnd","hasDataRange","getByteAt","dataChunk","dataChunkStart","dataChunkEnd","Error","_createClass","key","get","InternalDecodedString","value","bytesReadCount","_value","toString","StringUtils","readUTF16String","bytes","bigEndian","maxBytes","ix","offset1","offset2","arr","j","byte1","byte2","word1","String","fromCharCode","byte3","byte4","word2","join","readUTF8String","codepoint","readNullTerminatedString","MediaFileReader","_isInitialized","_size","canReadFile","file","init","callbacks","self","setTimeout","onSuccess","_init","onError","loadRange","range","getSize","getBytesAt","Array","isBitSetAt","bit","iByte","getSByteAt","getShortAt","isBigEndian","iShort","getSShortAt","iUShort","getLongAt","iByte1","iByte2","iByte3","iByte4","iLong","getSLongAt","iULong","getInteger24At","iInteger","getStringAt","string","getStringWithCharsetAt","charset","toLowerCase","getCharAt","getSynchsafeInteger32At","size1","size2","size3","size4","size","CHUNK_SIZE","XhrFileReader","_MediaFileReader","_inheritsLoose","url","_this","call","_url","test","setConfig","config","hasOwnProperty","_config","disallowedXhrHeaders","avoidHeadRequests","_fetchSizeWithGetRequest","_fetchSizeWithHeadRequest","_makeXHRRequest","xhr","contentLength","_parseContentLength","_roundRangeToChunkMultiple","contentRange","_parseContentRange","_getXhrResponseContent","instanceLength","_fetchEntireFile","response","responseText","_getResponseHeader","parseInt","parsedContentRange","match","firstBytePosition","lastBytePosition","newLength","ceil","method","_createXHRObject","open","onXHRLoad","status","onload","onerror","onreadystatechange","readyState","timeoutInSec","timeout","ontimeout","overrideMimeType","_setRequestHeader","send","headerName","headerValue","indexOf","setRequestHeader","_hasResponseHeader","allResponseHeaders","getAllResponseHeaders","headers","split","headerNames","getResponseHeader","character","charCodeAt","XMLHttpRequest","BlobFileReader","blob","_blob","Blob","File","blobSlice","browserFileReader","FileReader","onloadend","event","intArray","Uint8Array","result","onabort","type","info","error","readAsArrayBuffer","ArrayFileReader","array","_array","isArray","Buffer","isBuffer","MediaTagReader","mediaFileReader","_mediaFileReader","_tags","getTagIdentifierByteRange","canReadTagFormat","tagIdentifier","setTagsToRead","tags","read","_loadData","_parseData","ex","message","getShortcuts","_expandShortcutTags","tagsWithShortcuts","shortcuts","tagOrShortcut","ID3v1TagReader","_MediaTagReader","apply","arguments","id","fileSize","title","artist","album","year","trackFlag","track","version","comment","genreIdx","genre","GENRES","tag","frameReaderFunctions","FRAME_DESCRIPTIONS","ID3v2FrameReader","getFrameReaderFunction","frameId","readFrames","id3header","frames","frameHeaderSize","_getFrameHeaderSize","header","_readFrameHeader","flags","frameSize","frameDataOffset","headerSize","frameData","format","unsynchronisation","getUnsyncFileReader","data_length_indicator","readFrameFunc","parsedData","desc","_getFrameDescription","frame","description","push","major","_readFrameFlags","tag_alter_preservation","file_alter_preservation","read_only","grouping_identity","compression","encryption","readPictureFrame","start","getTextEncoding","bite","PICTURE_TYPE","readChapterFrame","originalOffset","startTime","endTime","startOffset","endOffset","remainingLength","subFrames","readTableOfContentsFrame","childElementIds","undefined","topLevel","ordered","entryCount","childId","readCommentsFrame","language","shortdesc","text","short_description","readCounterFrame","readTextFrame","getUserDefinedFields","readUrlFrame","readGenreFrame","replace","readLyricsFrame","descriptor","lyrics","ownerIdentifier","identifier","userDesc","userDefinedData","user_description","ID3_HEADER_SIZE","ID3v2TagReader","revision","unsynch","xheader","xindicator","xheadersize","id3","expandedTags","name","SHORTCUTS","_getFrameData","ids","MP4TagReader","_loadAtom","parentAtomFullName","atomSize","isNaN","atomName","_isContainerAtom","atomFullName","_canReadAtom","tagsToRead","_readAtom","indent","seek","atomData","_readMeanMetadataAtom","_readMetadataAtom","METADATA_HEADER","klass","TYPES","atomHeader","dataStart","dataLength","intReader","ATOM_DESCRIPTIONS","parentAtomName","atomOffset","FLAC_HEADER_SIZE","COMMENT_HEADERS","PICTURE_HEADERS","IMAGE_TYPES","FLACTagReader","_len","args","_key","_commentOffset","_pictureOffset","_loadBlock","blockHeader","blockSize","offsetMetadata","_nextBlock","vendorLength","offsetVendor","offsetList","numComments","dataOffset","picture","s","d","toUpperCase","imageType","offsetMimeLength","mimeLength","offsetMime","mime","offsetDescriptionLength","descriptionLength","offsetDescription","offsetDataLength","offsetData","imageData","fs","require","NodeFileReader","path","_path","stat","err","stats","fd","fileData","object","process","nextTick","readData","_fd","buffer","alloc","processData","bytesRead","close","console","storeBuffer","mediaFileReaders","mediaTagReaders","location","Reader","isRangeValid","invalidPositiveRange","invalidNegativeRange","_file","_tagsToRead","_fileReader","_tagReader","setFileReader","fileReader","setTagReader","tagReader","_getFileReader","_getTagReader","TagReader","_findFileReader","_findTagReader","tagReadersAtFileStart","tagReadersAtFileEnd","tagsLoaded","loadTagIdentifiersCallbacks","tagIndentifier","_loadTagIdentifierRanges","tagReaders","tagIdentifierRange","Number","MAX_VALUE","max","Config","addFileReader","addTagReader","removeTagReader","tagReaderIx","EXPERIMENTAL_avoidHeadRequests","setDisallowedXhrHeaders","setXhrTimeoutInSec","browser","navigator","product"],"mappings":"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"}